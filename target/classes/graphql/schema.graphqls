"""
Door type representing a door product
Example query:
query GetDoor {
  door(id: "1") {
    id
    name
    price
    finalPrice
  }
}
# Example GraphQL query to get door with images
query GetDoorWithImages {
  door(id: "1") {
    id
    name
    images
    finalPrice
  }
}
"""

type Page_Door {
    getAllDoors(page: Int!, size: Int!): Page
}

type Page {
    content: [Door]
    totalPages: Int
    totalElements: Int
    size: Int
    number: Int
}

type Order {
    id: ID!
    door: Door!
    quantity: Int!
    address: Address!
    status: OrderStatus!
    notes: String
    createdAt: DateTime!
    updatedAt: DateTime!
}

type Door {
    "Unique identifier for the door"
    id: ID!
    "Name of the door model"
    name: String!
    "Detailed description"
    description: String
    "Base price before customizations"
    price: Float!
    "List of image URLs"
    images: [String]
    "Door size (SIZE_200x2000, SIZE_240x2400, SIZE_220x2200, CUSTOM)"
    size: Size!
    "Door color (WHITE, BROWN, BLACK, CUSTOM)"
    color: Color!
    material: String
    manufacturer: String
    warrantyYears: Int
    customWidth: Float
    customHeight: Float
    isCustomColor: Boolean!
    "Final price after all customizations"
    finalPrice: Float!
    seller: User
    active: Boolean!
    width: Float
    height: Float
}

"""
Available door sizes
Example usage:
mutation ConfigureDoor {
  configureDoor(input: {
    id: "1"
    size: CUSTOM
    width: 250
    height: 220
  }) {
    id
    finalPrice
  }
}
"""
enum Size {
  SIZE_200x2000
  SIZE_300x2000
  SIZE_400x2000
  SIZE_500x2000
  SIZE_600x2000
  SIZE_700x2000
  SIZE_800x2000
  SIZE_900x2000
  SIZE_1000x2000
  SIZE_1100x2000
  SIZE_1200x2000
  CUSTOM
}

"""
Available door colors
Example usage:
mutation ConfigureDoorColor {
  configureDoor(input: {
    id: "1"
    color: CUSTOM
  }) {
    id
    finalPrice
  }
}
"""
enum Color {
    WHITE
    BROWN
    BLACK
    CUSTOM
}

"""
Root Query type
Example queries:
query GetAllDoors {
  doors {
    id
    name
    price
  }
}

query GetSingleDoor {
  door(id: "1") {
    name
    size
    color
    finalPrice
  }
}
"""
type Query {
    "Get a door by its ID"
    door(id: ID!): Door
    "Get all available doors"
    doors(page: Int = 0, size: Int = 10): Page_Door
    "Search doors by query"
    searchDoors(query: String!): [Door]!
    "Get the current user"
    currentUser: User
    "Get a user by its ID"
    user(id: ID!): User
    "Get all available users"
    users: [User]!
    "Get an address by its ID"
    address(id: ID!): Address
    "Get all available addresses"
    addresses: [Address]!
    "Search addresses by city"
    searchAddresses(city: String!): [Address]!
    "Get the nearest address by latitude and longitude"
    nearestAddress(latitude: Float!, longitude: Float!): Address
    "Get door viewing history for current user"
    doorHistory: UserDoorHistory!
    "Get an order by its ID"
    order(id: ID!): Order
    "Get all orders for the current user"
    userOrders: [Order]!
    "Get all addresses for the current user"
    userAddresses: [Address]!
}

"""
Root Mutation type
Example mutation:
mutation ConfigureDoor {
  configureDoor(input: {
    id: "1"
    size: CUSTOM
    color: BLACK
    width: 250
    height: 220
  }) {
    id
    size
    color
    finalPrice
  }
}
"""
type Mutation {
    # Door mutations
    "Create a new door"
    createDoor(input: DoorInput!): Door!
    "Update an existing door"
    updateDoor(id: ID!, input: DoorInput!): Door!
    "Delete a door by its ID"
    deleteDoor(id: ID!): Boolean!
    "Configure door dimensions and properties"
    configureDoor(input: DoorConfigInput!): Door!
    "Configure custom door dimensions"
    configureDoorDimensions(doorId: ID!, customWidth: Float!, customHeight: Float!): Door!
    
    # User mutations
    "Request seller status"
    requestSeller(userId: ID!): User!
    "Update user profile"
    updateProfile(input: UserProfileInput!): User!
    "Approve seller status"
    approveSeller(userId: ID!): Boolean!
    "Deactivate user account"
    deactivateAccount(userId: ID!): Boolean!
    
    # Order mutations
    "Create a new order"
    createOrder(input: OrderInput!): Order!
    "Update order status"
    updateOrderStatus(id: ID!, status: OrderStatus!): Order!
    
    # Address mutations
    "Create a new address"
    createAddress(input: AddressConfigInput!): Address!
    "Add an address to user profile"
    addAddress(input: AddressInput!): Address!
    "Update an existing address"
    updateAddress(id: ID!, input: AddressInput!): Address!
    "Delete an address"
    deleteAddress(id: ID!): Boolean!
}

"""
Input type for door configuration
Example:
{
  "input": {
    "id": "1",
    "size": "CUSTOM",
    "color": "BLACK",
    "width": 250,
    "height": 220
  }
}
"""
input DoorConfigInput {
    "Door ID to configure"
    id: ID
    "New size setting"
    size: Size
    "New color setting"
    color: Color
    "Custom width in cm"
    width: Float
    "Custom height in cm"
    height: Float
    "Name of the door model"
    name: String
    "Detailed description"
    description: String
    "Base price before customizations"
    price: Float
    material: String
    manufacturer: String
    warrantyYears: Int
}

"""
Input type for door creation and update
"""
input DoorInput {
    "Name of the door model"
    name: String!
    "Detailed description"
    description: String
    "Base price before customizations"
    price: Float!
    "Door size (SIZE_200x2000, SIZE_240x2400, SIZE_220x2200, CUSTOM)"
    size: Size!
    "Door color (WHITE, BROWN, BLACK, CUSTOM)"
    color: Color!
    material: String
    manufacturer: String
    warrantyYears: Int
    customWidth: Float
    customHeight: Float
    isCustomColor: Boolean
    images: [String]
}

"""
Input type for user profile update
"""
input UserProfileInput {
    "Name of the user"
    name: String
    "Email of the user"
    email: String
    "Phone number of the user"
    phone: String
    "Password of the user"
    password: String
}

"""
Input type for order creation
"""
input OrderInput {
    "ID of the door to order"
    doorId: ID!
    "Quantity of doors to order"
    quantity: Int!
    "ID of the address to ship to"
    addressId: ID!
    "Additional notes for the order"
    notes: String
}

"""
Input type for address creation and update
"""
input AddressInput {
    "Street address"
    street: String!
    "City"
    city: String!
    "Country"
    country: String!
    "Zip code"
    zipCode: String!
    "Latitude of the location"
    latitude: Float!
    "Longitude of the location"
    longitude: Float!
}

"""
Input type for address configuration
"""
input AddressConfigInput {
    "Name of the address"
    name: String!
    "Street address"
    street: String!
    "City"
    city: String!
    "Phone number"
    phone: String
    "Working hours"
    workingHours: String
    "Email address"
    email: String
    "Latitude of the location"
    latitude: Float!
    "Longitude of the location"
    longitude: Float!
    "Social links"
    socialLinks: JSON
}

"""
User type representing a user
"""
type User {
    "Unique identifier for the user"
    id: ID!
    "Name of the user"
    name: String!
    "Email of the user"
    email: String!
    "Lastname of the user"
    lastname: String!
    "Role of the user (USER, SELLER, ADMIN)"
    role: Role!
    "Phone number of the user"
    phone: String
    "Indicates if the user has a pending seller request"
    sellerRequestPending: Boolean
    active: Boolean!
}

"""
Address type representing an address
"""
type Address {
    "Unique identifier for the address"
    id: ID!
    "Street address"
    street: String!
    "City"
    city: String!
    "Country"
    country: String!
    "Zip code"
    zipCode: String!
    "Location of the address"
    location: Location!
}

"""
Location type representing a geographical location
"""
type Location {
    "Latitude of the location"
    latitude: Float!
    "Longitude of the location"
    longitude: Float!
}

"""
Available user roles
"""
enum Role {
    USER
    SELLER
    ADMIN
}

"""
Available order statuses
"""
enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
}

"""
Scalar type for JSON
"""
scalar JSON

"Door history entry type"
type DoorHistory {
    "History entry ID"
    id: ID!
    "When the door was viewed"
    accessedAt: DateTime!
    "Basic door information"
    door: DoorBasicInfo!
}

"Basic door information for history"
type DoorBasicInfo {
    "Door ID"
    id: ID!
    "Door name"
    name: String!
    "Base price"
    price: Float!
    "Final price after customizations"
    finalPrice: Float!
    "Door size"
    size: Size!
    "Door color"
    color: Color!
    "Material type"
    material: String
    "Seller ID"
    sellerId: ID!
}

"User door history with grouped data"
type UserDoorHistory {
    "Basic user information"
    user: UserBasicInfo!
    "List of door viewing history"
    history: [DoorHistory!]!
}

"Basic user information"
type UserBasicInfo {
    "User ID"
    id: ID!
    "Username"
    name: String!
    "Email address"
    email: String!
}

scalar DateTime

"""
Subscription type for real-time updates
"""
type Subscription {
    "Order status changed"
    orderStatusChanged(orderId: ID!): Order!
    "New door added"
    newDoorAdded: Door!
}
