2025-01-20 13:32:37 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 1179451 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 13:32:37 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 13:32:37 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 13:32:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 13:32:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 13:32:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 86 ms. Found 7 JPA repository interfaces.
2025-01-20 13:32:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 13:32:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 13:32:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 13:32:38 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 13:32:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 13:32:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 13:32:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 13:32:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 13:32:39 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1669 ms
2025-01-20 13:32:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 13:32:39 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 13:32:39 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 13:32:39 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 13:32:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 13:32:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3e8eea59
2025-01-20 13:32:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 13:32:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 13:32:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 13:32:57 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 13:32:58 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 13:32:59 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 13:33:00 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 13:33:00 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 13:33:00 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 13:33:00 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 13:33:00 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 13:33:00 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@577017c6, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@69d18bf0, org.springframework.security.web.context.SecurityContextHolderFilter@198b9a23, org.springframework.security.web.header.HeaderWriterFilter@5fbccdcb, org.springframework.web.filter.CorsFilter@1cf51f82, org.springframework.security.web.authentication.logout.LogoutFilter@29a1e9fc, uz.pdp.config.filtr.MyFilter@25b83dce, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@1771066e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@1dbdd768, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5a0fc6cd, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@54b1beea, org.springframework.security.web.access.ExceptionTranslationFilter@16d229bf, org.springframework.security.web.access.intercept.AuthorizationFilter@31ab3dc7]
2025-01-20 13:33:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 13:33:01 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.444 seconds (process running for 24.707)
2025-01-20 13:33:01 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:33:01 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 13:33:01 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 13:33:01 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 13:34:29 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:30 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:30 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:30 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:31 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:34:32 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 666 ms
2025-01-20 13:34:55 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 13:34:55 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 13:34:57 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 13:34:58 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 1190447 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 13:34:58 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 13:34:58 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 13:34:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 13:34:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 13:34:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 103 ms. Found 7 JPA repository interfaces.
2025-01-20 13:34:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 13:34:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 13:34:59 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-20 13:35:00 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 13:35:00 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 13:35:00 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 13:35:00 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 13:35:00 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 13:35:00 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2407 ms
2025-01-20 13:35:00 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 13:35:00 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 13:35:01 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 13:35:01 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 13:35:01 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 13:35:03 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6421bc7e
2025-01-20 13:35:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 13:35:03 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 13:35:05 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 13:35:18 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 13:35:18 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 13:35:19 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 13:35:19 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 13:35:20 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 13:35:20 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 13:35:20 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 13:35:20 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 13:35:20 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@49ee3426, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7a4a91f8, org.springframework.security.web.context.SecurityContextHolderFilter@7c6d7651, org.springframework.security.web.header.HeaderWriterFilter@4ca398b0, org.springframework.web.filter.CorsFilter@25471835, org.springframework.security.web.authentication.logout.LogoutFilter@1b4fef8b, uz.pdp.config.filtr.MyFilter@dd77e0d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@649b0336, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@426dc148, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@39d602d8, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@249199a7, org.springframework.security.web.access.ExceptionTranslationFilter@4ae48059, org.springframework.security.web.access.intercept.AuthorizationFilter@262f71ef]
2025-01-20 13:35:21 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 13:35:21 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 23.203 seconds (process running for 23.501)
2025-01-20 13:35:21 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:35:27 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 13:35:27 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 13:35:27 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 13:35:27 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:35:28 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 13:35:28 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 13:35:59 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 13:35:59 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 13:36:00 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 13:36:01 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 1195635 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 13:36:01 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 13:36:01 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 13:36:01 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 13:36:01 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 13:36:02 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 82 ms. Found 7 JPA repository interfaces.
2025-01-20 13:36:02 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 13:36:02 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 13:36:02 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-01-20 13:36:02 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 13:36:03 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 13:36:03 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 13:36:03 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 13:36:03 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 13:36:03 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1838 ms
2025-01-20 13:36:03 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 13:36:03 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 13:36:03 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 13:36:03 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 13:36:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 13:36:06 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@62536882
2025-01-20 13:36:06 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 13:36:06 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 13:36:07 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 13:36:21 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 13:36:21 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 13:36:22 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 13:36:23 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 13:36:23 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 13:36:23 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 13:36:23 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 13:36:23 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 13:36:23 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@502ab65b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@53d84d6c, org.springframework.security.web.context.SecurityContextHolderFilter@5dab1f38, org.springframework.security.web.header.HeaderWriterFilter@7aff0c30, org.springframework.web.filter.CorsFilter@1771066e, org.springframework.security.web.authentication.logout.LogoutFilter@2e5fcec6, uz.pdp.config.filtr.MyFilter@6ac2c5a1, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@854d6db, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4bbaaf1b, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@c63a15f, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1a85e263, org.springframework.security.web.access.ExceptionTranslationFilter@6b892f30, org.springframework.security.web.access.intercept.AuthorizationFilter@111698ac]
2025-01-20 13:36:24 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 13:36:24 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 23.367 seconds (process running for 23.629)
2025-01-20 13:36:24 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:36:25 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 13:36:25 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 13:36:25 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 13:36:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 13:36:25 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 13:36:25 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 13:36:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 13:36:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:01:27 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 180623 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:01:27 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:01:27 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:01:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:01:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:01:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 79 ms. Found 7 JPA repository interfaces.
2025-01-20 22:01:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:01:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:01:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-20 22:01:29 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:01:29 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:01:29 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:01:29 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:01:29 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:01:29 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1703 ms
2025-01-20 22:01:29 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:01:29 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:01:29 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:01:29 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:01:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:01:33 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3feb93a
2025-01-20 22:01:33 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:01:33 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:01:34 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:01:49 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:01:49 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:01:51 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:01:51 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:01:51 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:01:51 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:01:52 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:01:52 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:01:52 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@76448624, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3b39b73f, org.springframework.security.web.context.SecurityContextHolderFilter@25941b5b, org.springframework.security.web.header.HeaderWriterFilter@531b098a, org.springframework.web.filter.CorsFilter@6bc07760, org.springframework.security.web.authentication.logout.LogoutFilter@62dd1498, uz.pdp.config.filtr.MyFilter@4d964c9e, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@71ead6b0, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@55f2a26d, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@5d9f23b2, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@f4416fc, org.springframework.security.web.access.ExceptionTranslationFilter@128c3189, org.springframework.security.web.access.intercept.AuthorizationFilter@5a0fc6cd]
2025-01-20 22:01:52 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:01:52 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 25.877 seconds (process running for 26.34)
2025-01-20 22:01:52 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:01:53 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:01:53 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:01:53 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 22:01:58 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 404 ms
2025-01-20 22:03:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:03:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:04:14 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:04:14 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:04:16 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:04:18 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 194749 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:04:18 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:04:18 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:04:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:04:18 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:04:19 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67 ms. Found 7 JPA repository interfaces.
2025-01-20 22:04:19 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:04:19 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:04:19 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 22:04:19 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:04:19 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:04:19 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:04:19 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:04:19 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:04:19 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1416 ms
2025-01-20 22:04:20 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:04:20 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:04:20 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:04:20 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:04:20 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:04:23 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3feb93a
2025-01-20 22:04:23 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:04:23 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:04:24 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:04:37 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:04:38 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:04:39 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:04:39 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:04:39 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:04:39 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:04:40 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:04:40 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:04:40 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5c0104df, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7ec19e52, org.springframework.security.web.context.SecurityContextHolderFilter@34e7d3c7, org.springframework.security.web.header.HeaderWriterFilter@66dee88a, org.springframework.web.filter.CorsFilter@6f319f62, org.springframework.security.web.authentication.logout.LogoutFilter@76dc7bdb, uz.pdp.config.filtr.MyFilter@4d964c9e, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@63049f07, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@572c013f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@62dd1498, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6a26271b, org.springframework.security.web.access.ExceptionTranslationFilter@16987824, org.springframework.security.web.access.intercept.AuthorizationFilter@29a1e9fc]
2025-01-20 22:04:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:04:41 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 22.857 seconds (process running for 23.142)
2025-01-20 22:04:41 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:04:41 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:04:41 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:04:41 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 22:19:36 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 267261 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:19:36 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:19:36 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:19:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:19:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:19:36 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 77 ms. Found 7 JPA repository interfaces.
2025-01-20 22:19:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:19:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:19:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 22:19:37 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:19:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:19:37 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:19:37 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:19:37 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:19:37 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1516 ms
2025-01-20 22:19:38 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:19:38 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:19:38 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:19:38 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:19:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:19:41 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7a41f4a7
2025-01-20 22:19:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:19:41 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:19:42 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:19:56 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:19:56 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:19:57 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:19:58 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:19:58 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:19:58 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:19:58 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:19:58 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:19:58 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@31ab3dc7, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4c18a316, org.springframework.security.web.context.SecurityContextHolderFilter@494e9f73, org.springframework.security.web.header.HeaderWriterFilter@3616e609, org.springframework.web.filter.CorsFilter@7599111e, org.springframework.security.web.authentication.logout.LogoutFilter@69e64aa8, uz.pdp.config.filtr.MyFilter@53d2f0ec, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@4efd93ee, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@4860ff98, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@337eb1b4, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@c6578c1, org.springframework.security.web.access.ExceptionTranslationFilter@5d9f23b2, org.springframework.security.web.access.intercept.AuthorizationFilter@68d4814b]
2025-01-20 22:19:59 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:19:59 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 23.644 seconds (process running for 24.04)
2025-01-20 22:19:59 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:20:00 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:20:00 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:20:00 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 22:20:01 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 485 ms
2025-01-20 22:20:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:20:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:20:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:20:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:20:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:20:27 [http-nio-8080-exec-7] INFO  uz.pdp.service.ImageStorageService - Uploading door image: 84b67fc3-a8ef-4a51-bece-307e880b6bc7.jpg
2025-01-20 22:20:28 [http-nio-8080-exec-7] WARN  com.amazonaws.util.Base64 - JAXB is unavailable. Will fallback to SDK implementation which may be less performant.If you are using Java 9+, you will need to include javax.xml.bind:jaxb-api as a dependency.
2025-01-20 22:20:28 [http-nio-8080-exec-7] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded door image: 84b67fc3-a8ef-4a51-bece-307e880b6bc7.jpg
2025-01-20 22:20:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:20:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:20:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:20:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_filenames
        (door_id, filename) 
    values
        (?, ?)
2025-01-20 22:20:30 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:20:31 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:20:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:20:32 [http-nio-8080-exec-8] ERROR uz.pdp.service.ImageStorageService - Failed to extract key from URL: https://etadoor.s3.eu-north-1.amazonaws.com/doors/84b67fc3-a8ef-4a51-bece-307e880b6bc7.jpg
2025-01-20 22:20:32 [http-nio-8080-exec-8] INFO  uz.pdp.service.ImageStorageService - Uploading door image: fdbe235f-59d5-49b5-b6d7-cf35275abb8a.jpg
2025-01-20 22:20:32 [http-nio-8080-exec-8] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded door image: fdbe235f-59d5-49b5-b6d7-cf35275abb8a.jpg
2025-01-20 22:20:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:20:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:20:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_images 
    where
        door_id=?
2025-01-20 22:20:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:20:33 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:20:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_filenames 
    where
        door_id=?
2025-01-20 22:20:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_filenames
        (door_id, filename) 
    values
        (?, ?)
2025-01-20 22:20:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_filenames
        (door_id, filename) 
    values
        (?, ?)
2025-01-20 22:20:35 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:20:36 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:20:37 [http-nio-8080-exec-9] ERROR u.p.exception.GlobalExceptionHandler - Base exception occurred:  Oops! Door #6 seems to be playing hide and seek. We couldn't find it in our records!
2025-01-20 22:20:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:20:38 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:20:38 [http-nio-8080-exec-1] ERROR u.p.exception.GlobalExceptionHandler - Base exception occurred:  Oops! Door #6 seems to be playing hide and seek. We couldn't find it in our records!
2025-01-20 22:21:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:21:45 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:21:46 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:21:46 [http-nio-8080-exec-10] INFO  uz.pdp.service.ImageStorageService - Uploading door image: 0bb81b40-316d-44d7-803c-8ad32bc3e7d1.jpg
2025-01-20 22:21:47 [http-nio-8080-exec-10] INFO  uz.pdp.service.ImageStorageService - Successfully uploaded door image: 0bb81b40-316d-44d7-803c-8ad32bc3e7d1.jpg
2025-01-20 22:21:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:21:47 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:21:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:21:48 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_filenames
        (door_id, filename) 
    values
        (?, ?)
2025-01-20 22:21:50 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:21:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0
2025-01-20 22:21:51 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:21:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:21:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:21:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:21:52 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:21:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:21:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:21:53 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        ofn1_0.door_id,
        ofn1_0.filename 
    from
        furniture_door_filenames ofn1_0 
    where
        ofn1_0.door_id=?
2025-01-20 22:22:13 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:22:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:22:14 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:22:39 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 281352 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:22:39 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:22:39 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:22:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:22:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:22:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 75 ms. Found 7 JPA repository interfaces.
2025-01-20 22:22:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:22:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:22:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-20 22:22:40 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:22:41 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:22:41 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:22:41 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:22:41 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:22:41 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1444 ms
2025-01-20 22:22:41 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:22:41 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:22:41 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:22:41 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:22:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:22:44 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7a41f4a7
2025-01-20 22:22:44 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:22:44 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:22:45 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:22:58 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:22:58 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:22:59 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:22:59 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:23:00 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:23:00 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:23:00 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:23:00 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:23:00 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2ebc4fc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5cde2f06, org.springframework.security.web.context.SecurityContextHolderFilter@6517ed0d, org.springframework.security.web.header.HeaderWriterFilter@20516189, org.springframework.web.filter.CorsFilter@f400c86, org.springframework.security.web.authentication.logout.LogoutFilter@4bbaaf1b, uz.pdp.config.filtr.MyFilter@788d9139, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@2fdeaa3c, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2185b6d1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6f601ce0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@aa2df13, org.springframework.security.web.access.ExceptionTranslationFilter@c65734e, org.springframework.security.web.access.intercept.AuthorizationFilter@fc41a1d]
2025-01-20 22:23:01 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:23:01 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 22.126 seconds (process running for 22.443)
2025-01-20 22:23:01 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:23:02 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:23:02 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:23:02 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-01-20 22:23:03 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 419 ms
2025-01-20 22:23:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:23:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0
2025-01-20 22:23:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:23:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:23:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:23:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:23:18 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:23:19 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:23:19 [http-nio-8080-exec-7] ERROR u.p.exception.GlobalExceptionHandler - Base exception occurred:  Oops! Door #1 seems to be playing hide and seek. We couldn't find it in our records!
2025-01-20 22:23:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:23:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:23:22 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:23:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:23:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:23:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0 
    where
        fd1_0.id=?
2025-01-20 22:23:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_door_images 
    where
        door_id=?
2025-01-20 22:23:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    delete 
    from
        furniture_doors 
    where
        id=?
2025-01-20 22:23:33 [http-nio-8080-exec-3] INFO  org.hibernate.orm.jdbc.batch - HHH100503: On release of batch it still contained JDBC statements
2025-01-20 22:23:33 [http-nio-8080-exec-3] ERROR org.hibernate.orm.jdbc.batch - HHH100501: Exception executing batch [java.sql.BatchUpdateException: Batch entry 0 delete from furniture_doors where id=3 was aborted: ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".  Call getNextException to see other errors in the batch.], SQL: delete from furniture_doors where id=?
2025-01-20 22:23:33 [http-nio-8080-exec-3] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 0, SQLState: 23503
2025-01-20 22:23:33 [http-nio-8080-exec-3] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - Batch entry 0 delete from furniture_doors where id=3 was aborted: ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".  Call getNextException to see other errors in the batch.
2025-01-20 22:23:33 [http-nio-8080-exec-3] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".
2025-01-20 22:23:34 [http-nio-8080-exec-3] ERROR u.p.exception.GlobalExceptionHandler - Unexpected error occurred
org.springframework.dao.DataIntegrityViolationException: could not execute batch [Batch entry 0 delete from furniture_doors where id=3 was aborted: ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".  Call getNextException to see other errors in the batch.] [delete from furniture_doors where id=?]; SQL [delete from furniture_doors where id=?]; constraint [fk1mnocqi6o68yfu7m5c7d4mot2]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:290)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:565)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:249)
	at jdk.proxy2/jdk.proxy2.$Proxy221.deleteById(Unknown Source)
	at uz.pdp.service.FurnitureDoorService.delete(FurnitureDoorService.java:66)
	at uz.pdp.controller.FurnitureDoorController.delete(FurnitureDoorController.java:262)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:352)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:174)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:765)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:717)
	at uz.pdp.controller.FurnitureDoorController$$SpringCGLIB$$0.delete(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:262)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.ObservationFilterChainDecorator$FilterObservation$SimpleFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:479)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$1(ObservationFilterChainDecorator.java:340)
	at org.springframework.security.web.ObservationFilterChainDecorator.lambda$wrapSecured$0(ObservationFilterChainDecorator.java:82)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:128)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at uz.pdp.config.filtr.MyFilter.doFilter(MyFilter.java:43)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:227)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.wrapFilter(ObservationFilterChainDecorator.java:240)
	at org.springframework.security.web.ObservationFilterChainDecorator$AroundFilterObservation$SimpleAroundFilterObservation.lambda$wrap$0(ObservationFilterChainDecorator.java:323)
	at org.springframework.security.web.ObservationFilterChainDecorator$ObservationFilter.doFilter(ObservationFilterChainDecorator.java:224)
	at org.springframework.security.web.ObservationFilterChainDecorator$VirtualFilterChain.doFilter(ObservationFilterChainDecorator.java:137)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:195)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:225)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:352)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:268)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.ServerHttpObservationFilter.doFilterInternal(ServerHttpObservationFilter.java:109)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.ConstraintViolationException: could not execute batch [Batch entry 0 delete from furniture_doors where id=3 was aborted: ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".  Call getNextException to see other errors in the batch.] [delete from furniture_doors where id=?]
	at org.hibernate.exception.internal.SQLStateConversionDelegate.convert(SQLStateConversionDelegate.java:97)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.lambda$performExecution$2(BatchImpl.java:294)
	at org.hibernate.engine.jdbc.mutation.internal.PreparedStatementGroupSingleTable.forEachStatement(PreparedStatementGroupSingleTable.java:59)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.performExecution(BatchImpl.java:264)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.execute(BatchImpl.java:242)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.executeBatch(JdbcCoordinatorImpl.java:188)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:662)
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:499)
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:363)
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41)
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1423)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:504)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2339)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1996)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169)
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267)
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:561)
	... 165 common frames omitted
Caused by: java.sql.BatchUpdateException: Batch entry 0 delete from furniture_doors where id=3 was aborted: ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".  Call getNextException to see other errors in the batch.
	at org.postgresql.jdbc.BatchResultHandler.handleError(BatchResultHandler.java:165)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2402)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:574)
	at org.postgresql.jdbc.PgStatement.internalExecuteBatch(PgStatement.java:896)
	at org.postgresql.jdbc.PgStatement.executeBatch(PgStatement.java:919)
	at org.postgresql.jdbc.PgPreparedStatement.executeBatch(PgPreparedStatement.java:1685)
	at com.zaxxer.hikari.pool.ProxyStatement.executeBatch(ProxyStatement.java:127)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeBatch(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.batch.internal.BatchImpl.lambda$performExecution$2(BatchImpl.java:279)
	... 183 common frames omitted
Caused by: org.postgresql.util.PSQLException: ERROR: update or delete on table "furniture_doors" violates foreign key constraint "fk1mnocqi6o68yfu7m5c7d4mot2" on table "basket_items"
  Detail: Key (id)=(3) is still referenced from table "basket_items".
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	... 190 common frames omitted
2025-01-20 22:23:49 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:23:49 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:23:50 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:23:51 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 286894 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:23:51 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:23:51 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 7 JPA repository interfaces.
2025-01-20 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:23:52 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-20 22:23:53 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:23:53 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:23:53 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:23:53 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:23:53 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:23:53 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1641 ms
2025-01-20 22:23:53 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:23:53 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:23:53 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:23:53 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:23:54 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:23:56 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@77f95e19
2025-01-20 22:23:56 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:23:57 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:23:58 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:23:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:23:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:23:58 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:23:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:23:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:23:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:24:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:24:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:24:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:24:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:24:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:24:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:24:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:24:01 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:24:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:24:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:24:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:24:02 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:24:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:24:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:24:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:24:03 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:24:04 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:24:04 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:24:04 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to 6 other objects
2025-01-20 22:24:04 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:24:04 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:24:04 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:24:04 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to constraint fkbioxgbv59vetrxe0ejfubep1w on table order_items
2025-01-20 22:24:04 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:24:05 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:24:05 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:24:05 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to constraint fk87s17cinc4wkx0taas5nh0s8h on table baskets
2025-01-20 22:24:05 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:24:05 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:24:06 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:24:06 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:24:06 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:24:06 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:24:07 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:24:07 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:24:07 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:24:07 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:24:08 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:24:08 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:24:08 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:24:09 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:24:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:24:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:24:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:24:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:24:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:24:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:24:10 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:24:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:24:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:24:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:24:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:24:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:24:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:24:12 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:24:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:24:14 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:24:15 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:24:15 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:24:15 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:24:15 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:24:15 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:24:15 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@a520a55, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5517e36b, org.springframework.security.web.context.SecurityContextHolderFilter@2f7cf665, org.springframework.security.web.header.HeaderWriterFilter@7b8bf5c0, org.springframework.web.filter.CorsFilter@157544e5, org.springframework.security.web.authentication.logout.LogoutFilter@57c11c38, uz.pdp.config.filtr.MyFilter@c0521e5, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3dfa4c9b, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@741a14e4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@67b4b072, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1c0db15, org.springframework.security.web.access.ExceptionTranslationFilter@2d19622c, org.springframework.security.web.access.intercept.AuthorizationFilter@6517ed0d]
2025-01-20 22:24:16 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:24:16 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 25.292 seconds (process running for 25.551)
2025-01-20 22:24:16 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:24:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:24:18 [RMI TCP Connection(4)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:24:18 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:24:18 [RMI TCP Connection(4)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 22:27:10 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:27:10 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:27:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:27:17 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 302974 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:27:17 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:27:17 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:27:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:27:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:27:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 7 JPA repository interfaces.
2025-01-20 22:27:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:27:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:27:17 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-20 22:27:18 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:27:18 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:27:18 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:27:18 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:27:18 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:27:18 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1597 ms
2025-01-20 22:27:18 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:27:19 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:27:19 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:27:19 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:27:19 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:27:21 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@299cddbf
2025-01-20 22:27:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:27:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:27:23 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:27:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:27:23 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:27:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:27:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:27:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:27:24 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:27:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:27:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:27:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:27:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:27:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:27:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:27:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:27:27 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:27:27 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:27:27 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:27:27 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:27:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:27:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:27:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:27:28 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:27:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:27:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:27:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:27:29 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:27:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:27:30 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:27:30 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:27:31 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:27:31 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:27:31 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:27:31 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:27:32 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:27:32 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:27:32 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:27:32 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:27:33 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:27:33 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:27:33 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:27:33 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:27:34 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:27:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:27:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:27:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:27:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:27:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:27:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:27:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:27:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:27:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:27:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:27:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:27:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:27:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:27:37 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:27:38 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:27:39 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:27:40 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:27:40 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:27:40 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:27:41 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:27:41 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:27:41 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@2ddc0583, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4ca398b0, org.springframework.security.web.context.SecurityContextHolderFilter@68613002, org.springframework.security.web.header.HeaderWriterFilter@1002002f, org.springframework.web.filter.CorsFilter@490a9467, org.springframework.security.web.authentication.logout.LogoutFilter@63049f07, uz.pdp.config.filtr.MyFilter@79636080, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@783e1529, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@791e4ccc, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@71ead6b0, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@27f9b652, org.springframework.security.web.access.ExceptionTranslationFilter@633eb17b, org.springframework.security.web.access.intercept.AuthorizationFilter@1771066e]
2025-01-20 22:27:42 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:27:42 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 25.728 seconds (process running for 26.251)
2025-01-20 22:27:42 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:27:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:43 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:27:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:27:50 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:27:50 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:27:50 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 22:28:45 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:28:46 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0
2025-01-20 22:28:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:47 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:49 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:50 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:28:51 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 22:30:59 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:30:59 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:31:00 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:31:46 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 323752 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:31:46 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:31:46 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:31:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:31:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:31:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 76 ms. Found 7 JPA repository interfaces.
2025-01-20 22:31:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:31:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:31:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 22:31:47 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:31:48 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:31:48 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:31:48 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:31:48 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:31:48 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1563 ms
2025-01-20 22:31:48 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:31:48 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:31:48 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:31:48 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:31:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:31:51 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@492a220e
2025-01-20 22:31:51 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:31:51 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:31:52 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:32:06 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:32:06 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:32:07 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:32:08 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:32:08 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:32:08 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:32:08 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:32:08 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:32:08 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@1176abeb, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@4ef5f92d, org.springframework.security.web.context.SecurityContextHolderFilter@1287f07e, org.springframework.security.web.header.HeaderWriterFilter@6cef2367, org.springframework.web.filter.CorsFilter@55f05a73, org.springframework.security.web.authentication.logout.LogoutFilter@26dd7f53, uz.pdp.config.filtr.MyFilter@306cfb8a, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@12643e97, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@158a50a1, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@514b88b7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@44dd4acb, org.springframework.security.web.access.ExceptionTranslationFilter@4181a180, org.springframework.security.web.access.intercept.AuthorizationFilter@380f934e]
2025-01-20 22:32:09 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:32:09 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 23.493 seconds (process running for 23.889)
2025-01-20 22:32:09 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:32:10 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 22:32:10 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:32:11 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:32:11 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:32:11 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 22:32:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:32:19 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 22:32:19 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:32:43 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:32:43 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:32:44 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:32:46 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 328404 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:32:46 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:32:46 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:32:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:32:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:32:46 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 99 ms. Found 7 JPA repository interfaces.
2025-01-20 22:32:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:32:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:32:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-20 22:32:47 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:32:47 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:32:47 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:32:47 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:32:47 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:32:47 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1647 ms
2025-01-20 22:32:48 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:32:48 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:32:48 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:32:48 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:32:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:32:50 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@7ff40324
2025-01-20 22:32:50 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:32:51 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:32:52 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:32:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:32:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:32:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:32:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:32:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:32:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:32:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:32:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:32:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:32:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:32:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:32:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:32:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:32:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:32:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:32:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:32:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:32:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:32:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:32:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:32:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:32:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:32:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:32:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:32:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:32:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:32:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:32:59 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:32:59 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:33:00 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:33:00 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:33:00 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:33:00 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:33:01 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:33:01 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:33:01 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:33:01 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:33:02 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:33:02 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:33:02 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:33:02 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:33:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:33:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:33:03 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:33:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:33:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:33:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:33:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:33:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:33:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:33:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:33:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:33:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:33:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:33:06 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:33:07 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:33:08 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:33:08 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:33:09 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:33:09 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:33:09 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:33:09 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:33:09 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@749bf322, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6bbf9cb2, org.springframework.security.web.context.SecurityContextHolderFilter@4ffb223c, org.springframework.security.web.header.HeaderWriterFilter@74786396, org.springframework.web.filter.CorsFilter@2a9d20d5, org.springframework.security.web.authentication.logout.LogoutFilter@319b4fb3, uz.pdp.config.filtr.MyFilter@1d167630, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@3caef656, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@eba9ab4, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1cf51f82, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5ea854da, org.springframework.security.web.access.ExceptionTranslationFilter@3c91189, org.springframework.security.web.access.intercept.AuthorizationFilter@1283f2ea]
2025-01-20 22:33:10 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:33:10 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.718 seconds (process running for 25.134)
2025-01-20 22:33:10 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:33:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:11 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 22:33:12 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:33:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:33:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:33:23 [RMI TCP Connection(3)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:33:23 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:33:23 [RMI TCP Connection(3)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 22:35:19 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:35:19 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:35:21 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:35:23 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 340647 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:35:23 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:35:23 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:35:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:35:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:35:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 72 ms. Found 7 JPA repository interfaces.
2025-01-20 22:35:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:35:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:35:24 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 22:35:24 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:35:24 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:35:24 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:35:24 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:35:24 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:35:24 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1698 ms
2025-01-20 22:35:25 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:35:25 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:35:25 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:35:25 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:35:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:35:28 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@701bd6e8
2025-01-20 22:35:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:35:28 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:35:29 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:35:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:35:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:35:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:35:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:35:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:35:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:35:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:35:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:35:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:35:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:35:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:35:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:35:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:35:32 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:35:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:35:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:35:33 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:35:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:35:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:35:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:35:34 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:35:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:35:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:35:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:35:35 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:35:36 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:35:36 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:35:36 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:35:36 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:35:37 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:35:37 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:35:37 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:35:38 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:35:38 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:35:38 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:35:38 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:35:39 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:35:39 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:35:39 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:35:39 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:35:40 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:35:40 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:35:40 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:35:40 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:35:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:35:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:35:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:35:41 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:35:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:35:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:35:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:35:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:35:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:35:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:35:43 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:35:44 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:35:45 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:35:45 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:35:45 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:35:45 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:35:46 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:35:46 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:35:46 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@53d917df, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@54ae646f, org.springframework.security.web.context.SecurityContextHolderFilter@4386192f, org.springframework.security.web.header.HeaderWriterFilter@2fd2dc5c, org.springframework.web.filter.CorsFilter@64578e76, org.springframework.security.web.authentication.logout.LogoutFilter@384f8455, uz.pdp.config.filtr.MyFilter@217c6a1e, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@7ab63914, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@6366056e, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7f65a00e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7ffcd8df, org.springframework.security.web.access.ExceptionTranslationFilter@5cea1344, org.springframework.security.web.access.intercept.AuthorizationFilter@4f21e216]
2025-01-20 22:35:47 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:35:47 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.151 seconds (process running for 24.418)
2025-01-20 22:35:47 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:35:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:48 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 22:35:48 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:35:49 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=?
2025-01-20 22:35:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:53 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:35:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:54 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:35:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:36:00 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:36:00 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:36:00 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 22:36:10 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:36:11 [http-nio-8080-exec-1] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 22:36:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:36:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:21 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:36:22 [http-nio-8080-exec-3] INFO  uz.pdp.controller.DoorController - Fetching doors page 2 with size 20
2025-01-20 22:36:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:36:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 22:36:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:36:27 [http-nio-8080-exec-4] INFO  uz.pdp.controller.DoorController - Fetching doors page 1 with size 20
2025-01-20 22:36:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:36:27 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 22:36:31 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:36:32 [http-nio-8080-exec-5] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 22:36:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:36:32 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:33 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:36:35 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:37:39 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:37:39 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:37:41 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:37:43 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 351625 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:37:43 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:37:43 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 70 ms. Found 7 JPA repository interfaces.
2025-01-20 22:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:37:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-20 22:37:44 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:37:45 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:37:45 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:37:45 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:37:45 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:37:45 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1486 ms
2025-01-20 22:37:45 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:37:45 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:37:45 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:37:45 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:37:45 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:37:48 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@13da6bc9
2025-01-20 22:37:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:37:48 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:37:49 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:38:02 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:38:02 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:38:03 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:38:04 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:38:04 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:38:04 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:38:04 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:38:04 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:38:04 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5e2c3e80, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@6c60c170, org.springframework.security.web.context.SecurityContextHolderFilter@262f71ef, org.springframework.security.web.header.HeaderWriterFilter@5c8c1f0d, org.springframework.web.filter.CorsFilter@2418ffcc, org.springframework.security.web.authentication.logout.LogoutFilter@7769fd08, uz.pdp.config.filtr.MyFilter@6d87253e, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@43ddde24, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5dadf7d9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@226ddb69, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@35454e3b, org.springframework.security.web.access.ExceptionTranslationFilter@18177a3c, org.springframework.security.web.access.intercept.AuthorizationFilter@517ca1dc]
2025-01-20 22:38:05 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:38:05 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 22.324 seconds (process running for 22.641)
2025-01-20 22:38:05 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:38:05 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:38:05 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:38:05 [main] WARN  com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@13da6bc9 (This connection has been closed.). Possibly consider using a shorter maxLifetime value.
2025-01-20 22:38:06 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:38:08 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 353851 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:38:08 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:38:08 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:38:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:38:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:38:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 63 ms. Found 7 JPA repository interfaces.
2025-01-20 22:38:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:38:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:38:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 12 ms. Found 0 Redis repository interfaces.
2025-01-20 22:38:09 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:38:09 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:38:09 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:38:09 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:38:09 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:38:09 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1363 ms
2025-01-20 22:38:09 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:38:09 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:38:09 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:38:10 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:38:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:38:12 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@31beb0d0
2025-01-20 22:38:12 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:38:12 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:38:13 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:38:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:38:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:38:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:38:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:38:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:38:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:38:17 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:38:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:38:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:38:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:38:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:38:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:38:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:38:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:38:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:38:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:38:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:38:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:38:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:38:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:38:21 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:38:21 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:38:21 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:38:21 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:38:22 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:38:22 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:38:22 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:38:23 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:38:23 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:38:23 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:38:23 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:38:24 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:38:24 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:38:24 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:38:24 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:38:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:38:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:38:25 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:38:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:38:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:38:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:38:26 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:38:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:38:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:38:27 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:38:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:38:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:38:28 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:38:28 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:38:29 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:38:30 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:38:30 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:38:30 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:38:30 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:38:31 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:38:31 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:38:31 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@60357655, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@a8b7754, org.springframework.security.web.context.SecurityContextHolderFilter@329181d1, org.springframework.security.web.header.HeaderWriterFilter@15c14cbd, org.springframework.web.filter.CorsFilter@7a8bda44, org.springframework.security.web.authentication.logout.LogoutFilter@2a2632d9, uz.pdp.config.filtr.MyFilter@79636080, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@475193d4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3f8f80d3, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@490a9467, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7499df3a, org.springframework.security.web.access.ExceptionTranslationFilter@7511928e, org.springframework.security.web.access.intercept.AuthorizationFilter@3caef656]
2025-01-20 22:38:32 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:38:32 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.123 seconds (process running for 24.391)
2025-01-20 22:38:32 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:38:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:33 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 22:38:33 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:38:34 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=?
2025-01-20 22:38:34 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:35 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:36 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:37 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:39 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:38:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:44 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:38:48 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:38:48 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:38:48 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 22:38:54 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 407 ms
2025-01-20 22:39:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:39:00 [http-nio-8080-exec-6] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 22:39:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:39:00 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 22:39:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:01 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:02 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:03 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:04 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:05 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:06 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:16 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:39:17 [http-nio-8080-exec-7] INFO  uz.pdp.controller.DoorController - Fetching doors page 2 with size 20
2025-01-20 22:39:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:39:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 22:39:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:39:21 [http-nio-8080-exec-8] INFO  uz.pdp.controller.DoorController - Fetching doors page 1 with size 20
2025-01-20 22:39:21 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:39:22 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:39:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:39:32 [http-nio-8080-exec-3] INFO  uz.pdp.controller.DoorController - Fetching doors page 1 with size 20
2025-01-20 22:39:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:39:33 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:41:23 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:41:23 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:41:24 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:41:27 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 369286 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:41:27 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:41:27 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:41:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:41:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:41:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 74 ms. Found 7 JPA repository interfaces.
2025-01-20 22:41:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:41:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:41:27 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 22:41:28 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:41:28 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:41:28 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:41:28 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:41:28 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:41:28 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1448 ms
2025-01-20 22:41:28 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:41:28 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:41:28 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:41:28 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:41:28 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:41:32 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@1dbb9a4a
2025-01-20 22:41:32 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:41:32 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:41:34 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:41:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:41:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:41:34 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:41:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:41:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:41:35 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:41:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:41:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:41:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:41:36 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:41:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:41:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:41:37 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:41:37 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:41:38 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:41:38 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:41:38 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:41:39 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:41:39 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:41:40 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:41:40 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:41:40 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:41:40 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:41:41 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:41:41 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:41:41 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:41:41 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:41:42 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:41:42 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:41:42 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:41:42 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:41:43 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:41:43 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:41:43 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:41:43 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:41:44 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:41:44 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:41:44 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:41:45 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:41:45 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:41:45 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:41:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:41:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:41:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:41:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:41:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:41:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:41:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:41:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:41:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:41:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:41:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:41:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:41:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:41:49 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:41:49 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:41:51 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:41:51 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:41:51 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:41:51 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:41:52 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:41:52 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:41:52 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@7a8a2cd8, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5a1f3003, org.springframework.security.web.context.SecurityContextHolderFilter@4ca398b0, org.springframework.security.web.header.HeaderWriterFilter@4ae48059, org.springframework.web.filter.CorsFilter@1abde659, org.springframework.security.web.authentication.logout.LogoutFilter@5f4c831f, uz.pdp.config.filtr.MyFilter@2b561f51, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@ecc9052, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7cd577db, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@56b56566, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6c60a141, org.springframework.security.web.access.ExceptionTranslationFilter@eba9ab4, org.springframework.security.web.access.intercept.AuthorizationFilter@5c8c1f0d]
2025-01-20 22:41:53 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:41:53 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 26.597 seconds (process running for 26.915)
2025-01-20 22:41:53 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 22:41:54 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:41:55 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=?
2025-01-20 22:41:55 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:56 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:57 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:58 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:41:59 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:00 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:42:00 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:42:00 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 22:42:00 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:01 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:01 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:02 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:42:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:04 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:05 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:06 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:42:10 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:42:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:16 [http-nio-8080-exec-4] INFO  uz.pdp.controller.DoorController - Fetching doors page 1 with size 20
2025-01-20 22:42:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:42:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:42:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:42:17 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:42:22 [RMI TCP Connection(4)-127.0.0.1] WARN  o.s.b.a.d.redis.RedisHealthIndicator - Redis health check failed
org.springframework.data.redis.RedisConnectionFailureException: Unable to connect to Redis
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.translateException(LettuceConnectionFactory.java:1805)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1736)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1538)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.lambda$getConnection$0(LettuceConnectionFactory.java:1518)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.doInLock(LettuceConnectionFactory.java:1478)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1515)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedConnection(LettuceConnectionFactory.java:1199)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getConnection(LettuceConnectionFactory.java:1006)
	at org.springframework.data.redis.core.RedisConnectionUtils.fetchConnection(RedisConnectionUtils.java:194)
	at org.springframework.data.redis.core.RedisConnectionUtils.doGetConnection(RedisConnectionUtils.java:143)
	at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:104)
	at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:91)
	at org.springframework.boot.actuate.data.redis.RedisHealthIndicator.doHealthCheck(RedisHealthIndicator.java:49)
	at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:82)
	at org.springframework.boot.actuate.health.HealthIndicator.getHealth(HealthIndicator.java:37)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:82)
	at org.springframework.boot.actuate.health.HealthEndpoint.getHealth(HealthEndpoint.java:41)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getLoggedHealth(HealthEndpointSupport.java:172)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:145)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getAggregateContribution(HealthEndpointSupport.java:156)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getContribution(HealthEndpointSupport.java:141)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:110)
	at org.springframework.boot.actuate.health.HealthEndpointSupport.getHealth(HealthEndpointSupport.java:81)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:76)
	at org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:66)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:281)
	at org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:74)
	at org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:60)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:124)
	at org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:97)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:814)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:802)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1472)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1310)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1405)
	at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
	at java.base/jdk.internal.reflect.GeneratedMethodAccessor73.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
	at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
	at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: io.lettuce.core.RedisConnectionException: Unable to connect to redis-15073.crce175.eu-north-1-1.ec2.redns.redis-cloud.com/<unresolved>:15073
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:78)
	at io.lettuce.core.RedisConnectionException.create(RedisConnectionException.java:56)
	at io.lettuce.core.AbstractRedisClient.getConnection(AbstractRedisClient.java:350)
	at io.lettuce.core.RedisClient.connect(RedisClient.java:215)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:112)
	at java.base/java.util.Optional.orElseGet(Optional.java:364)
	at org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:112)
	at org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$ExceptionTranslatingConnectionProvider.getConnection(LettuceConnectionFactory.java:1734)
	... 54 common frames omitted
Caused by: io.netty.channel.ConnectTimeoutException: connection timed out after 10000 ms: redis-15073.crce175.eu-north-1-1.ec2.redns.redis-cloud.com/51.20.189.194:15073
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe$1.run(AbstractNioChannel.java:261)
	at io.netty.util.concurrent.PromiseTask.runTask(PromiseTask.java:98)
	at io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:153)
	at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)
	at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	... 1 common frames omitted
2025-01-20 22:42:22 [RMI TCP Connection(4)-127.0.0.1] WARN  o.s.b.a.health.HealthEndpointSupport - Health contributor org.springframework.boot.actuate.data.redis.RedisHealthIndicator (redis) took 11102ms to respond
2025-01-20 22:42:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:42:50 [http-nio-8080-exec-6] INFO  uz.pdp.controller.HealthController - Redis health check passed
2025-01-20 22:44:23 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:44:23 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:44:24 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:44:27 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 384843 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:44:27 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:44:27 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:44:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:44:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:44:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 105 ms. Found 7 JPA repository interfaces.
2025-01-20 22:44:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:44:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:44:28 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 22:44:28 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:44:29 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:44:29 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:44:29 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:44:29 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:44:29 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1779 ms
2025-01-20 22:44:29 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:44:29 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:44:29 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:44:29 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:44:29 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:44:32 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@299cddbf
2025-01-20 22:44:32 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:44:33 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:44:34 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:44:37 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 385614 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:44:37 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:44:37 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:44:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:44:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:44:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 60 ms. Found 7 JPA repository interfaces.
2025-01-20 22:44:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:44:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:44:37 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-20 22:44:38 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:44:38 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:44:38 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:44:38 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:44:38 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:44:38 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1291 ms
2025-01-20 22:44:38 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:44:38 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:44:38 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:44:38 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:44:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:44:41 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3a22d69f
2025-01-20 22:44:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:44:41 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:44:42 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:44:42 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:44:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:44:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:44:43 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:44:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:44:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:44:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:44:47 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 386589 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:44:47 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:44:47 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:44:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:44:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:44:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 67 ms. Found 7 JPA repository interfaces.
2025-01-20 22:44:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:44:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:44:47 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 11 ms. Found 0 Redis repository interfaces.
2025-01-20 22:44:48 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:44:48 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:44:48 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:44:48 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:44:48 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:44:48 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1328 ms
2025-01-20 22:44:48 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:44:48 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:44:48 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:44:48 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:44:49 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:44:51 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@6a9a6a0c
2025-01-20 22:44:51 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:44:51 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:44:52 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:44:52 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 22:44:53 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:53 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fkf8co3916tiiox4iohci7ybiyg" of relation "address_social_links" does not exist, skipping
2025-01-20 22:44:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 22:44:53 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:53 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fk7wf86ejdl44syummkme09y06f" of relation "addresses" does not exist, skipping
2025-01-20 22:44:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 22:44:53 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:53 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fk1fa36y2oqhao3wgg2rw1pi459" of relation "addresses" does not exist, skipping
2025-01-20 22:44:53 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 22:44:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fklgeojgfhu94pbgyev43gtwdyq" of relation "company" does not exist, skipping
2025-01-20 22:44:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 22:44:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fkt90ivcl5f3phabfuqw6k3t9ow" of relation "company_socials_list" does not exist, skipping
2025-01-20 22:44:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 22:44:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:54 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fklskx5ehjqd7u0dmumo4bhuliu" of relation "door_history" does not exist, skipping
2025-01-20 22:44:54 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 22:44:55 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 22:44:55 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "fkajibco0vlgy0ngsyg33k0wb0u" of relation "door_history" does not exist, skipping
2025-01-20 22:44:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 22:44:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 22:44:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 22:44:55 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 22:44:56 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 22:44:56 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 22:44:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 22:44:56 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 22:44:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 22:44:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 22:44:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 22:44:57 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 22:44:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 22:44:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 22:44:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 22:44:58 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 22:44:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 22:44:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 22:44:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 22:44:59 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 22:45:00 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 22:45:00 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 22:45:00 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 22:45:01 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 22:45:01 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 22:45:01 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 22:45:01 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 22:45:02 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:45:02 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 22:45:02 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 22:45:02 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 22:45:03 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 22:45:03 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 22:45:03 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-20 22:45:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 22:45:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 22:45:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 22:45:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 22:45:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 22:45:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 22:45:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 22:45:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 22:45:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 22:45:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 22:45:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 22:45:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 22:45:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 22:45:07 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:45:07 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:45:08 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 22:45:09 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 22:45:09 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 22:45:09 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 22:45:10 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 22:45:10 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 22:45:10 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@f4416fc, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5d63d496, org.springframework.security.web.context.SecurityContextHolderFilter@20516189, org.springframework.security.web.header.HeaderWriterFilter@c65734e, org.springframework.web.filter.CorsFilter@2b95004a, org.springframework.security.web.authentication.logout.LogoutFilter@12c9f1eb, uz.pdp.config.filtr.MyFilter@8e77c5b, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5c806f1d, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3f3cacde, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@51b9ee5e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4386192f, org.springframework.security.web.access.ExceptionTranslationFilter@5adba350, org.springframework.security.web.access.intercept.AuthorizationFilter@76dc7bdb]
2025-01-20 22:45:11 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 22:45:11 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.13 seconds (process running for 24.39)
2025-01-20 22:45:11 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 22:45:11 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 22:45:12 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=?
2025-01-20 22:45:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:13 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 22:45:13 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 22:45:13 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 22:45:13 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:45:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:14 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:45:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:19 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:45:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 22:45:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:22 [http-nio-8080-exec-4] INFO  uz.pdp.controller.DoorController - Fetching doors page 1 with size 20
2025-01-20 22:45:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:45:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:22 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 22:45:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 22:45:25 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 22:45:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 22:45:26 [http-nio-8080-exec-6] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 22:45:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 22:45:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 22:45:27 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:29 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:30 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:31 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:45:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 22:47:58 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:47:58 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:48:00 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:50:53 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 415884 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 22:50:53 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 22:50:53 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 22:50:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:50:53 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 22:50:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 80 ms. Found 7 JPA repository interfaces.
2025-01-20 22:50:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 22:50:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 22:50:54 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 15 ms. Found 0 Redis repository interfaces.
2025-01-20 22:50:54 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 22:50:55 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 22:50:55 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 22:50:55 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 22:50:55 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 22:50:55 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2148 ms
2025-01-20 22:50:56 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 22:50:56 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 22:50:56 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 22:50:56 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 22:50:56 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 22:50:59 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@29b2a94c
2025-01-20 22:50:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 22:50:59 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 22:51:00 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 22:51:13 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:51:13 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 22:51:14 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable)
2025-01-20 22:51:14 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 22:51:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 22:51:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 22:51:16 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-20 22:51:16 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-20 22:51:16 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 34 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable)
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 44 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.searchDoors(java.lang.String,java.lang.Double,java.lang.Double,uz.pdp.enums.Color,uz.pdp.enums.Size,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Double,java.lang.Double,java.lang.String,org.springframework.data.domain.Pageable)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 56 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.sqm.UnknownPathException: Could not resolve attribute 'style' of 'uz.pdp.entity.Door' [SELECT DISTINCT d FROM Door d
WHERE (:material IS NULL OR d.material = :material)
AND (:minPrice IS NULL OR d.price >= :minPrice)
AND (:maxPrice IS NULL OR d.price <= :maxPrice)
AND (:color IS NULL OR d.color = :color)
AND (:size IS NULL OR d.size = :size)
AND (:style IS NULL OR d.style = :style)
AND (:manufacturer IS NULL OR d.manufacturer = :manufacturer)
AND (:minWarranty IS NULL OR d.warrantyYears >= :minWarranty)
AND (:customWidth IS NULL OR
    (d.size = uz.pdp.enums.Size.CUSTOM AND d.customWidth = :customWidth))
AND (:customHeight IS NULL OR
    (d.size = uz.pdp.enums.Size.CUSTOM AND d.customHeight = :customHeight))
AND (:searchTerm IS NULL OR
    (LOWER(d.name) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR
     LOWER(d.description) LIKE LOWER(CONCAT('%', :searchTerm, '%'))))
AND d.active = true
]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:827)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:732)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy2/jdk.proxy2.$Proxy198.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 62 common frames omitted
Caused by: org.hibernate.query.sqm.UnknownPathException: Could not resolve attribute 'style' of 'uz.pdp.entity.Door' [SELECT DISTINCT d FROM Door d
WHERE (:material IS NULL OR d.material = :material)
AND (:minPrice IS NULL OR d.price >= :minPrice)
AND (:maxPrice IS NULL OR d.price <= :maxPrice)
AND (:color IS NULL OR d.color = :color)
AND (:size IS NULL OR d.size = :size)
AND (:style IS NULL OR d.style = :style)
AND (:manufacturer IS NULL OR d.manufacturer = :manufacturer)
AND (:minWarranty IS NULL OR d.warrantyYears >= :minWarranty)
AND (:customWidth IS NULL OR
    (d.size = uz.pdp.enums.Size.CUSTOM AND d.customWidth = :customWidth))
AND (:customHeight IS NULL OR
    (d.size = uz.pdp.enums.Size.CUSTOM AND d.customHeight = :customHeight))
AND (:searchTerm IS NULL OR
    (LOWER(d.name) LIKE LOWER(CONCAT('%', :searchTerm, '%')) OR
     LOWER(d.description) LIKE LOWER(CONCAT('%', :searchTerm, '%'))))
AND d.active = true
]
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:87)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:165)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:147)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:769)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:819)
	... 71 common frames omitted
Caused by: org.hibernate.query.sqm.PathElementException: Could not resolve attribute 'style' of 'uz.pdp.entity.Door'
	at org.hibernate.query.sqm.SqmPathSource.getSubPathSource(SqmPathSource.java:95)
	at org.hibernate.query.sqm.tree.domain.AbstractSqmPath.get(AbstractSqmPath.java:203)
	at org.hibernate.query.sqm.tree.domain.AbstractSqmFrom.resolvePathPart(AbstractSqmFrom.java:196)
	at org.hibernate.query.hql.internal.DomainPathPart.resolvePathPart(DomainPathPart.java:42)
	at org.hibernate.query.hql.internal.BasicDotIdentifierConsumer.consumeIdentifier(BasicDotIdentifierConsumer.java:91)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimplePath(SemanticQueryBuilder.java:5050)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitIndexedPathAccessFragment(SemanticQueryBuilder.java:4999)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGeneralPathFragment(SemanticQueryBuilder.java:4974)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGeneralPathExpression(SemanticQueryBuilder.java:1776)
	at org.hibernate.grammars.hql.HqlParser$GeneralPathExpressionContext.accept(HqlParser.java:7699)
	at org.antlr.v4.runtime.tree.AbstractParseTreeVisitor.visitChildren(AbstractParseTreeVisitor.java:46)
	at org.hibernate.grammars.hql.HqlParserBaseVisitor.visitBarePrimaryExpression(HqlParserBaseVisitor.java:756)
	at org.hibernate.grammars.hql.HqlParser$BarePrimaryExpressionContext.accept(HqlParser.java:7157)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.createComparisonPredicate(SemanticQueryBuilder.java:2429)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitComparisonPredicate(SemanticQueryBuilder.java:2392)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitComparisonPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$ComparisonPredicateContext.accept(HqlParser.java:6164)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitOrPredicate(SemanticQueryBuilder.java:2271)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitOrPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$OrPredicateContext.accept(HqlParser.java:6255)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGroupedPredicate(SemanticQueryBuilder.java:2252)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitGroupedPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$GroupedPredicateContext.accept(HqlParser.java:6084)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2262)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2261)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2261)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2261)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2261)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2261)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:2261)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitAndPredicate(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$AndPredicateContext.accept(HqlParser.java:6039)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitWhereClause(SemanticQueryBuilder.java:2244)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitWhereClause(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$WhereClauseContext.accept(HqlParser.java:5905)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuery(SemanticQueryBuilder.java:1159)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:941)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitQuerySpecExpression(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$QuerySpecExpressionContext.accept(HqlParser.java:1869)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:926)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSimpleQueryGroup(SemanticQueryBuilder.java:269)
	at org.hibernate.grammars.hql.HqlParser$SimpleQueryGroupContext.accept(HqlParser.java:1740)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitSelectStatement(SemanticQueryBuilder.java:443)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.visitStatement(SemanticQueryBuilder.java:402)
	at org.hibernate.query.hql.internal.SemanticQueryBuilder.buildSemanticModel(SemanticQueryBuilder.java:311)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:71)
	... 75 common frames omitted
2025-01-20 23:05:43 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 486302 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 23:05:43 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 23:05:43 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 23:05:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:05:43 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 23:05:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 97 ms. Found 7 JPA repository interfaces.
2025-01-20 23:05:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:05:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 23:05:44 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-01-20 23:05:44 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 23:05:45 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 23:05:45 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 23:05:45 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 23:05:45 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 23:05:45 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1750 ms
2025-01-20 23:05:45 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 23:05:45 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 23:05:45 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 23:05:45 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 23:05:45 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 23:05:48 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@59f5a376
2025-01-20 23:05:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 23:05:48 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 23:05:49 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 23:06:02 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:06:02 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 23:06:04 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 23:06:05 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 23:06:05 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 23:06:05 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 23:06:06 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 23:06:06 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 23:06:06 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4e10eebf, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7b169edf, org.springframework.security.web.context.SecurityContextHolderFilter@29edafb8, org.springframework.security.web.header.HeaderWriterFilter@3f6a2122, org.springframework.web.filter.CorsFilter@31a818d4, org.springframework.security.web.authentication.logout.LogoutFilter@747056e5, uz.pdp.config.filtr.MyFilter@392ef4ff, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@69f69592, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@22a9c19a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1644d1cf, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6cd693cf, org.springframework.security.web.access.ExceptionTranslationFilter@68d8d628, org.springframework.security.web.access.intercept.AuthorizationFilter@1eb1f09]
2025-01-20 23:06:07 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 23:06:07 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.793 seconds (process running for 28.718)
2025-01-20 23:06:08 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 23:06:09 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 23:06:10 [http-nio-8080-exec-4] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 23:06:10 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 23:06:10 [http-nio-8080-exec-4] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-20 23:06:10 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=?
2025-01-20 23:06:11 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0
2025-01-20 23:06:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:12 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:13 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:14 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:06:15 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:09:11 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:09:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 23:09:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 23:11:25 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 507249 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 23:11:25 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 23:11:25 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 23:11:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:11:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 23:11:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 71 ms. Found 7 JPA repository interfaces.
2025-01-20 23:11:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:11:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 23:11:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-20 23:11:27 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 23:11:27 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 23:11:27 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 23:11:27 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 23:11:27 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 23:11:27 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1502 ms
2025-01-20 23:11:27 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 23:11:27 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 23:11:27 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 23:11:27 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 23:11:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 23:11:30 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@4cbd17b3
2025-01-20 23:11:30 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 23:11:30 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 23:11:32 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 23:11:33 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-20 23:11:34 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-20 23:11:46 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:11:46 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 23:11:47 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
2025-01-20 23:11:47 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:11:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 23:11:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 23:11:48 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-20 23:11:48 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-20 23:11:48 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 34 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 44 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 56 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.SyntaxException: At 1:21 and token 'USE', mismatched input 'USE', expecting one of the following tokens: <EOF>, ',', CROSS, FULL, GROUP, INNER, JOIN, LEFT, ORDER, OUTER, RIGHT, WHERE [SELECT d FROM Door d USE INDEX (idx_door_material, idx_door_price)
WHERE d.active = true
AND d.material = :material
AND d.color = :color
AND d.price BETWEEN :minPrice AND :maxPrice
AND d.id != :doorId
ORDER BY ABS(d.price - (
    SELECT d2.price FROM Door d2 WHERE d2.id = :doorId
)) ASC
]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:827)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:732)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy2/jdk.proxy2.$Proxy199.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 62 common frames omitted
Caused by: org.hibernate.query.SyntaxException: At 1:21 and token 'USE', mismatched input 'USE', expecting one of the following tokens: <EOF>, ',', CROSS, FULL, GROUP, INNER, JOIN, LEFT, ORDER, OUTER, RIGHT, WHERE [SELECT d FROM Door d USE INDEX (idx_door_material, idx_door_price)
WHERE d.active = true
AND d.material = :material
AND d.color = :color
AND d.price BETWEEN :minPrice AND :maxPrice
AND d.id != :doorId
ORDER BY ABS(d.price - (
    SELECT d2.price FROM Door d2 WHERE d2.id = :doorId
)) ASC
]
	at org.hibernate.query.hql.internal.StandardHqlTranslator$1.syntaxError(StandardHqlTranslator.java:108)
	at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)
	at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)
	at org.hibernate.grammars.hql.HqlParser.statement(HqlParser.java:367)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.parseHql(StandardHqlTranslator.java:143)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:67)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:165)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:147)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:769)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:819)
	... 71 common frames omitted
2025-01-20 23:13:08 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 515479 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 23:13:08 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 23:13:08 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 23:13:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:13:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 23:13:08 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 95 ms. Found 7 JPA repository interfaces.
2025-01-20 23:13:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:13:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 23:13:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 6 ms. Found 0 Redis repository interfaces.
2025-01-20 23:13:09 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 23:13:09 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 23:13:09 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 23:13:09 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 23:13:09 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 23:13:09 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1689 ms
2025-01-20 23:13:10 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 23:13:10 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 23:13:10 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 23:13:10 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 23:13:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 23:13:13 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@78a0d664
2025-01-20 23:13:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 23:13:13 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 23:13:14 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 23:13:16 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-20 23:13:16 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-20 23:13:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-20 23:13:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-20 23:13:17 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-20 23:13:18 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-20 23:13:18 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-20 23:13:18 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-20 23:13:18 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-20 23:13:18 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-20 23:13:30 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:13:30 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 23:13:31 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
2025-01-20 23:13:31 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:13:31 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 23:13:32 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 23:13:32 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-20 23:13:32 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-20 23:13:32 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 34 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 44 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 56 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.SyntaxException: At 1:21 and token 'USE', mismatched input 'USE', expecting one of the following tokens: <EOF>, ',', CROSS, FULL, GROUP, INNER, JOIN, LEFT, ORDER, OUTER, RIGHT, WHERE [SELECT d FROM Door d USE INDEX (idx_door_material, idx_door_price)
WHERE d.active = true
AND d.material = :material
AND d.color = :color
AND d.price BETWEEN :minPrice AND :maxPrice
AND d.id != :doorId
ORDER BY ABS(d.price - (
    SELECT d2.price FROM Door d2 WHERE d2.id = :doorId
)) ASC
]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:827)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:732)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy2/jdk.proxy2.$Proxy199.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 62 common frames omitted
Caused by: org.hibernate.query.SyntaxException: At 1:21 and token 'USE', mismatched input 'USE', expecting one of the following tokens: <EOF>, ',', CROSS, FULL, GROUP, INNER, JOIN, LEFT, ORDER, OUTER, RIGHT, WHERE [SELECT d FROM Door d USE INDEX (idx_door_material, idx_door_price)
WHERE d.active = true
AND d.material = :material
AND d.color = :color
AND d.price BETWEEN :minPrice AND :maxPrice
AND d.id != :doorId
ORDER BY ABS(d.price - (
    SELECT d2.price FROM Door d2 WHERE d2.id = :doorId
)) ASC
]
	at org.hibernate.query.hql.internal.StandardHqlTranslator$1.syntaxError(StandardHqlTranslator.java:108)
	at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)
	at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)
	at org.hibernate.grammars.hql.HqlParser.statement(HqlParser.java:367)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.parseHql(StandardHqlTranslator.java:143)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:67)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:165)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:147)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:769)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:819)
	... 71 common frames omitted
2025-01-20 23:13:39 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 517710 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 23:13:39 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 23:13:39 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 23:13:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:13:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 23:13:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 81 ms. Found 7 JPA repository interfaces.
2025-01-20 23:13:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:13:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 23:13:40 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-20 23:13:40 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 23:13:40 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 23:13:40 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 23:13:40 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 23:13:40 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 23:13:40 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1629 ms
2025-01-20 23:13:41 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 23:13:41 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 23:13:41 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 23:13:41 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 23:13:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 23:13:43 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@108d59b6
2025-01-20 23:13:43 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 23:13:44 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 23:13:45 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 23:13:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-20 23:13:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-20 23:13:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-20 23:13:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-20 23:13:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-20 23:13:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-20 23:13:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-20 23:13:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-20 23:13:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-20 23:13:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-20 23:13:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKb4n2f6xh5k5a16ix0dasotef4
2025-01-20 23:13:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-20 23:13:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-20 23:13:48 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-20 23:13:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-20 23:13:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-20 23:13:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-20 23:13:49 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-20 23:13:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-20 23:13:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-20 23:13:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-20 23:13:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-20 23:13:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-20 23:13:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-20 23:13:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-20 23:13:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-20 23:13:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-20 23:13:52 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-20 23:13:52 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-20 23:13:53 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-20 23:13:53 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-20 23:13:53 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-20 23:13:53 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-20 23:13:54 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-20 23:13:54 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-20 23:13:54 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        door_id bigint not null,
        image_url varchar(255)
    )
2025-01-20 23:13:54 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-20 23:13:55 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-20 23:13:55 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) not null,
        user_id bigint not null,
        contact_phone varchar(255) not null,
        delivery_address varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-20 23:13:55 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-20 23:13:56 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255),
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id),
        constraint idx_user_email unique (email)
    )
2025-01-20 23:13:56 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-20 23:13:56 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-20 23:13:56 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-20 23:13:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-20 23:13:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-20 23:13:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-20 23:13:57 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-20 23:13:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-20 23:13:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-20 23:13:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-20 23:13:58 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-20 23:13:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-20 23:13:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-20 23:13:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-20 23:13:59 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-20 23:14:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-20 23:14:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-20 23:14:00 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-20 23:14:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-20 23:14:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-20 23:14:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-20 23:14:01 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKb4n2f6xh5k5a16ix0dasotef4 
       foreign key (door_id) 
       references furniture_doors
2025-01-20 23:14:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-20 23:14:02 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-20 23:14:02 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:14:02 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 23:14:03 [main] WARN  o.s.b.w.s.c.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
2025-01-20 23:14:03 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:14:03 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-20 23:14:04 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-20 23:14:04 [main] INFO  o.a.catalina.core.StandardService - Stopping service [Tomcat]
2025-01-20 23:14:04 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-01-20 23:14:04 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminController': Unsatisfied dependency expressed through field 'adminService': Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'adminService': Unsatisfied dependency expressed through field 'doorRepository': Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:508)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1418)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 20 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'doorRepository' defined in uz.pdp.repository.DoorRepository defined in @EnableJpaRepositories declared on ProjectModul10Application: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1773)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:784)
	... 34 common frames omitted
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable); Reason: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:99)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:88)
	at java.base/java.util.Optional.map(Optional.java:260)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.<init>(QueryExecutorMethodInterceptor.java:88)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:279)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)
	at org.springframework.data.util.Lazy.get(Lazy.java:113)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:285)
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	... 44 common frames omitted
Caused by: java.lang.IllegalArgumentException: Validation failed for query for method public abstract org.springframework.data.domain.Page uz.pdp.repository.DoorRepository.findSimilarDoors(java.lang.String,uz.pdp.enums.Color,double,double,java.lang.Long,org.springframework.data.domain.Pageable)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:100)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.<init>(SimpleJpaQuery.java:70)
	at org.springframework.data.jpa.repository.query.JpaQueryFactory.fromMethodWithQueryString(JpaQueryFactory.java:60)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$DeclaredQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:170)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$CreateIfNotFoundQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:252)
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:95)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:111)
	... 56 common frames omitted
Caused by: java.lang.IllegalArgumentException: org.hibernate.query.SyntaxException: At 1:21 and token 'USE', mismatched input 'USE', expecting one of the following tokens: <EOF>, ',', CROSS, FULL, GROUP, INNER, JOIN, LEFT, ORDER, OUTER, RIGHT, WHERE [SELECT d FROM Door d USE INDEX (idx_door_material, idx_door_price)
WHERE d.active = true
AND d.material = :material
AND d.color = :color
AND d.price BETWEEN :minPrice AND :maxPrice
AND d.id != :doorId
ORDER BY ABS(d.price - (
    SELECT d2.price FROM Door d2 WHERE d2.id = :doorId
)) ASC
]
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:143)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:827)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:732)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:133)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364)
	at jdk.proxy2/jdk.proxy2.$Proxy199.createQuery(Unknown Source)
	at org.springframework.data.jpa.repository.query.SimpleJpaQuery.validateQuery(SimpleJpaQuery.java:94)
	... 62 common frames omitted
Caused by: org.hibernate.query.SyntaxException: At 1:21 and token 'USE', mismatched input 'USE', expecting one of the following tokens: <EOF>, ',', CROSS, FULL, GROUP, INNER, JOIN, LEFT, ORDER, OUTER, RIGHT, WHERE [SELECT d FROM Door d USE INDEX (idx_door_material, idx_door_price)
WHERE d.active = true
AND d.material = :material
AND d.color = :color
AND d.price BETWEEN :minPrice AND :maxPrice
AND d.id != :doorId
ORDER BY ABS(d.price - (
    SELECT d2.price FROM Door d2 WHERE d2.id = :doorId
)) ASC
]
	at org.hibernate.query.hql.internal.StandardHqlTranslator$1.syntaxError(StandardHqlTranslator.java:108)
	at org.antlr.v4.runtime.ProxyErrorListener.syntaxError(ProxyErrorListener.java:41)
	at org.antlr.v4.runtime.Parser.notifyErrorListeners(Parser.java:544)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportInputMismatch(DefaultErrorStrategy.java:327)
	at org.antlr.v4.runtime.DefaultErrorStrategy.reportError(DefaultErrorStrategy.java:139)
	at org.hibernate.grammars.hql.HqlParser.statement(HqlParser.java:367)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.parseHql(StandardHqlTranslator.java:143)
	at org.hibernate.query.hql.internal.StandardHqlTranslator.translate(StandardHqlTranslator.java:67)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.createHqlInterpretation(QueryInterpretationCacheStandardImpl.java:165)
	at org.hibernate.query.internal.QueryInterpretationCacheStandardImpl.resolveHqlInterpretation(QueryInterpretationCacheStandardImpl.java:147)
	at org.hibernate.internal.AbstractSharedSessionContract.interpretHql(AbstractSharedSessionContract.java:769)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:819)
	... 71 common frames omitted
2025-01-20 23:14:38 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.13 with PID 522755 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-20 23:14:38 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-20 23:14:38 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-20 23:14:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:14:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-20 23:14:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 66 ms. Found 7 JPA repository interfaces.
2025-01-20 23:14:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-20 23:14:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-20 23:14:39 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 10 ms. Found 0 Redis repository interfaces.
2025-01-20 23:14:39 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-20 23:14:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-20 23:14:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-20 23:14:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-20 23:14:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-20 23:14:39 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1466 ms
2025-01-20 23:14:40 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-20 23:14:40 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-20 23:14:40 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-20 23:14:40 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-20 23:14:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-20 23:14:43 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@60e5b3a8
2025-01-20 23:14:43 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-20 23:14:43 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-20 23:14:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-20 23:14:58 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-20 23:14:58 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-20 23:15:00 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-20 23:15:00 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-20 23:15:01 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-20 23:15:01 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-20 23:15:01 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-20 23:15:01 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-20 23:15:01 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@3998a6ce, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7c6d8723, org.springframework.security.web.context.SecurityContextHolderFilter@127f0896, org.springframework.security.web.header.HeaderWriterFilter@605fea50, org.springframework.web.filter.CorsFilter@10051dd2, org.springframework.security.web.authentication.logout.LogoutFilter@34253041, uz.pdp.config.filtr.MyFilter@3d5f08d4, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@10249c61, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@31f1574c, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@120aa894, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@6b6090d4, org.springframework.security.web.access.ExceptionTranslationFilter@eb7670b, org.springframework.security.web.access.intercept.AuthorizationFilter@1852cea2]
2025-01-20 23:15:02 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-20 23:15:02 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 24.464 seconds (process running for 24.766)
2025-01-20 23:15:02 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-20 23:15:03 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:04 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-20 23:15:04 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-20 23:15:04 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-20 23:15:04 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-01-20 23:15:04 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-20 23:15:04 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-20 23:15:05 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-20 23:15:05 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:05 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0
2025-01-20 23:15:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:06 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:07 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:08 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:09 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:10 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:11 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:12 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, final_price, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:13 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-20 23:15:14 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:16 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (door_id, image_url) 
    values
        (?, ?)
2025-01-20 23:15:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-20 23:15:22 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        fd1_0.id,
        fd1_0.description,
        fd1_0.dimensions,
        fd1_0.furniture_type,
        fd1_0.material,
        fd1_0.name,
        fd1_0.price,
        fd1_0.stock_quantity 
    from
        furniture_doors fd1_0
2025-01-20 23:15:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:23 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:24 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:25 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:26 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:26 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:26 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:26 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:27 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        iu1_0.door_id,
        iu1_0.image_url 
    from
        furniture_door_images iu1_0 
    where
        iu1_0.door_id=?
2025-01-20 23:15:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-20 23:15:36 [http-nio-8080-exec-5] INFO  uz.pdp.controller.DoorController - Fetching doors page 0 with size 20
2025-01-20 23:15:36 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.color,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.final_price,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    offset
        ? rows 
    fetch
        first ? rows only
2025-01-20 23:15:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        count(d1_0.id) 
    from
        doors d1_0
2025-01-20 23:15:37 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:38 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:40 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-20 23:15:42 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
