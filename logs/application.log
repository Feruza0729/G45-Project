2025-01-22 13:31:04 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 13:31:04 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-22 13:31:09 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-22 16:18:02 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 334907 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-22 16:18:02 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-22 16:18:02 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-22 16:18:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 16:18:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-22 16:18:03 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 122 ms. Found 11 JPA repository interfaces.
2025-01-22 16:18:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 16:18:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-22 16:18:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 7 ms. Found 0 Redis repository interfaces.
2025-01-22 16:18:04 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-22 16:18:05 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-22 16:18:05 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-22 16:18:05 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-22 16:18:05 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-22 16:18:05 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 2480 ms
2025-01-22 16:18:05 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-22 16:18:05 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-22 16:18:05 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-22 16:18:05 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-22 16:18:05 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-22 16:18:08 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5bb45afc
2025-01-22 16:18:08 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-22 16:18:09 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-22 16:18:10 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-22 16:18:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0
2025-01-22 16:18:12 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0" via JDBC [ERROR: syntax error at or near "DEFAULT"
  Position: 91]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0" via JDBC [ERROR: syntax error at or near "DEFAULT"
  Position: 91]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1232)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:950)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "DEFAULT"
  Position: 91
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 38 common frames omitted
2025-01-22 16:18:29 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 16:18:30 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-22 16:18:32 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-22 16:18:32 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-22 16:18:32 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-22 16:18:32 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-22 16:18:33 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-22 16:18:33 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-22 16:18:33 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@285446f0, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@1eac48b9, org.springframework.security.web.context.SecurityContextHolderFilter@5a61a7d2, org.springframework.security.web.header.HeaderWriterFilter@23ca4308, org.springframework.web.filter.CorsFilter@1ee7e8a4, org.springframework.security.web.authentication.logout.LogoutFilter@14323fbc, uz.pdp.config.filtr.MyFilter@7204d98f, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@17d84654, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7420478a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@1572f95a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7a206aa, org.springframework.security.web.access.ExceptionTranslationFilter@68a8c257, org.springframework.security.web.access.intercept.AuthorizationFilter@65db569d]
2025-01-22 16:18:34 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-22 16:18:34 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 32.22 seconds (process running for 32.886)
2025-01-22 16:18:34 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 16:18:34 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-22 16:18:34 [main] WARN  com.zaxxer.hikari.pool.PoolBase - HikariPool-1 - Failed to validate connection org.postgresql.jdbc.PgConnection@5bb45afc (This connection has been closed.). Possibly consider using a shorter maxLifetime value.
2025-01-22 16:18:36 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-22 16:18:37 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 338092 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-22 16:18:37 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-22 16:18:37 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-22 16:18:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 16:18:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-22 16:18:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 104 ms. Found 11 JPA repository interfaces.
2025-01-22 16:18:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 16:18:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-22 16:18:38 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-22 16:18:39 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-22 16:18:39 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-22 16:18:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-22 16:18:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-22 16:18:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-22 16:18:39 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1714 ms
2025-01-22 16:18:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-22 16:18:40 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-22 16:18:40 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-22 16:18:40 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-22 16:18:40 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-22 16:18:43 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@47f677a4
2025-01-22 16:18:43 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-22 16:18:43 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-22 16:18:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-22 16:18:44 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-22 16:18:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-22 16:18:45 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-22 16:18:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-22 16:18:46 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-22 16:18:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-22 16:18:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-22 16:18:47 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-22 16:18:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-22 16:18:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-22 16:18:48 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-22 16:18:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-22 16:18:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-22 16:18:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-22 16:18:49 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-22 16:18:50 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-22 16:18:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-22 16:18:50 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-22 16:18:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-22 16:18:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-22 16:18:51 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-22 16:18:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-22 16:18:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-22 16:18:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-22 16:18:52 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-22 16:18:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-22 16:18:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-22 16:18:53 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-22 16:18:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-22 16:18:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-22 16:18:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-22 16:18:54 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-22 16:18:55 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-22 16:18:55 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-22 16:18:55 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-22 16:18:55 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-22 16:18:56 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version integer DEFAULT 0 not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY')),
        primary key (id)
    )
2025-01-22 16:18:56 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-22 16:18:56 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-22 16:18:57 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-22 16:18:57 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-22 16:18:58 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-22 16:18:58 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-22 16:18:58 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-22 16:18:58 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-22 16:18:59 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-22 16:18:59 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-22 16:18:59 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-22 16:19:00 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-22 16:19:00 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-22 16:19:00 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-22 16:19:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-22 16:19:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-22 16:19:01 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-22 16:19:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-22 16:19:02 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-22 16:19:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-22 16:19:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-22 16:19:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-22 16:19:03 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-22 16:19:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-22 16:19:04 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-22 16:19:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-22 16:19:04 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-22 16:19:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-22 16:19:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-22 16:19:05 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-22 16:19:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-22 16:19:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-22 16:19:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-22 16:19:06 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-22 16:19:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-22 16:19:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-22 16:19:07 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-22 16:19:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-22 16:19:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-22 16:19:08 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-22 16:19:09 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-22 16:19:09 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 16:19:10 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-22 16:19:12 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-22 16:19:12 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-22 16:19:12 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-22 16:19:12 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-22 16:19:13 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-22 16:19:13 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-22 16:19:13 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4c010b0a, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@76f3595, org.springframework.security.web.context.SecurityContextHolderFilter@29ddedb5, org.springframework.security.web.header.HeaderWriterFilter@6519c4f4, org.springframework.web.filter.CorsFilter@79939bb, org.springframework.security.web.authentication.logout.LogoutFilter@61d43e35, uz.pdp.config.filtr.MyFilter@b5311cb, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@5c545e45, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@276f3c7f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3cf197bb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@51f88999, org.springframework.security.web.access.ExceptionTranslationFilter@72220ba2, org.springframework.security.web.access.intercept.AuthorizationFilter@7258e01d]
2025-01-22 16:19:14 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-22 16:19:14 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 36.905 seconds (process running for 37.427)
2025-01-22 16:19:14 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:19:15 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:15 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-22 16:19:16 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-22 16:19:16 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-22 16:19:17 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:18 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:19 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:20 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:21 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:22 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:23 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, color, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:24 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:25 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 16:19:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:26 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:27 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:28 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:29 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:30 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_doors
        (description, dimensions, furniture_type, material, name, price, stock_quantity) 
    values
        (?, ?, ?, ?, ?, ?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:31 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:32 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        furniture_door_images
        (furniture_door_id, image_url) 
    values
        (?, ?)
2025-01-22 16:19:33 [RMI TCP Connection(2)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-22 16:19:33 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-22 16:19:33 [RMI TCP Connection(2)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-22 16:20:15 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 755 ms
2025-01-22 16:20:28 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:21:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 16:21:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-22 16:21:32 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-22 16:27:08 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 376070 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-22 16:27:08 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-22 16:27:08 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-22 16:27:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 16:27:09 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-22 16:27:10 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 215 ms. Found 11 JPA repository interfaces.
2025-01-22 16:27:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 16:27:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-22 16:27:11 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 14 ms. Found 0 Redis repository interfaces.
2025-01-22 16:27:11 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-22 16:27:12 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-22 16:27:12 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-22 16:27:12 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-22 16:27:12 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-22 16:27:12 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 4050 ms
2025-01-22 16:27:13 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-22 16:27:13 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-22 16:27:13 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-22 16:27:13 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-22 16:27:13 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-22 16:27:16 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@86e8469
2025-01-22 16:27:16 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-22 16:27:17 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-22 16:27:19 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-22 16:27:20 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0
2025-01-22 16:27:20 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0" via JDBC [ERROR: syntax error at or near "DEFAULT"
  Position: 91]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0" via JDBC [ERROR: syntax error at or near "DEFAULT"
  Position: 91]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1232)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:950)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "DEFAULT"
  Position: 91
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 38 common frames omitted
2025-01-22 16:27:21 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       drop constraint if exists idx_user_email
2025-01-22 16:27:21 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-22 16:27:21 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - constraint "idx_user_email" of relation "users" does not exist, skipping
2025-01-22 16:27:21 [main] DEBUG org.hibernate.SQL - 
    alter table if exists users 
       add constraint idx_user_email unique (email)
2025-01-22 16:27:36 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 16:27:38 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-22 16:27:41 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-22 16:27:42 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-22 16:27:42 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-22 16:27:42 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-22 16:27:43 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-22 16:27:43 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-22 16:27:43 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@4c9c3b3b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@30d1d46d, org.springframework.security.web.context.SecurityContextHolderFilter@7a2c610e, org.springframework.security.web.header.HeaderWriterFilter@3a307611, org.springframework.web.filter.CorsFilter@5365c33b, org.springframework.security.web.authentication.logout.LogoutFilter@21c653ca, uz.pdp.config.filtr.MyFilter@7120daa6, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@4987e6f9, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@66934a44, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@50100b54, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5faaf06d, org.springframework.security.web.access.ExceptionTranslationFilter@735aed6a, org.springframework.security.web.access.intercept.AuthorizationFilter@6bbb60b1]
2025-01-22 16:27:45 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-22 16:27:45 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 37.044 seconds (process running for 37.691)
2025-01-22 16:27:45 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:27:45 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-22 16:30:05 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-22 16:30:05 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-22 16:30:05 [http-nio-8080-exec-1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 3 ms
2025-01-22 16:30:08 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 1408 ms
2025-01-22 16:39:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:39:23 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        cev1_0.id,
        cev1_0.created_at,
        cev1_0.created_by,
        cev1_0.display_name,
        cev1_0.enum_type,
        cev1_0.is_active,
        cev1_0.name 
    from
        custom_enum_values cev1_0 
    where
        cev1_0.enum_type=? 
        and cev1_0.is_active
2025-01-22 16:39:29 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:39:30 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        cev1_0.id,
        cev1_0.created_at,
        cev1_0.created_by,
        cev1_0.display_name,
        cev1_0.enum_type,
        cev1_0.is_active,
        cev1_0.name 
    from
        custom_enum_values cev1_0 
    where
        cev1_0.enum_type=? 
        and cev1_0.is_active
2025-01-22 16:39:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:39:53 [http-nio-8080-exec-1] DEBUG u.pdp.service.EnumManagementService - Looking up user by username: etadoor
2025-01-22 16:39:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:39:53 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        cev1_0.id 
    from
        custom_enum_values cev1_0 
    where
        cev1_0.name=? 
        and cev1_0.enum_type=? 
    fetch
        first ? rows only
2025-01-22 16:39:54 [http-nio-8080-exec-1] DEBUG u.pdp.service.EnumManagementService - Creating new enum value: 1500X2000 of type Size by user etadoor
2025-01-22 16:39:54 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    insert 
    into
        custom_enum_values
        (created_at, created_by, display_name, enum_type, is_active, name) 
    values
        (?, ?, ?, ?, ?, ?)
2025-01-22 16:40:02 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 16:40:03 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    select
        cev1_0.id,
        cev1_0.created_at,
        cev1_0.created_by,
        cev1_0.display_name,
        cev1_0.enum_type,
        cev1_0.is_active,
        cev1_0.name 
    from
        custom_enum_values cev1_0 
    where
        cev1_0.enum_type=? 
        and cev1_0.is_active
2025-01-22 16:40:11 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 16:40:11 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-22 16:40:13 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-22 22:47:03 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 178762 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-22 22:47:03 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-22 22:47:03 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-22 22:47:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 22:47:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-22 22:47:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 93 ms. Found 11 JPA repository interfaces.
2025-01-22 22:47:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 22:47:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-22 22:47:04 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 4 ms. Found 0 Redis repository interfaces.
2025-01-22 22:47:04 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-22 22:47:05 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-22 22:47:05 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-22 22:47:05 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-22 22:47:05 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-22 22:47:05 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1649 ms
2025-01-22 22:47:05 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-22 22:47:05 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-22 22:47:05 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-22 22:47:05 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-22 22:47:05 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-22 22:47:08 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@5bb45afc
2025-01-22 22:47:08 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-22 22:47:09 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-22 22:47:10 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-22 22:47:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0
2025-01-22 22:47:12 [main] WARN  o.h.t.s.i.ExceptionHandlerLoggedImpl - GenerationTarget encountered exception accepting command : Error executing DDL "
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0" via JDBC [ERROR: syntax error at or near "DEFAULT"
  Position: 91]
org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL "
    alter table if exists basket_item 
       alter column version set data type integer DEFAULT 0" via JDBC [ERROR: syntax error at or near "DEFAULT"
  Position: 91]
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlString(AbstractSchemaMigrator.java:574)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.applySqlStrings(AbstractSchemaMigrator.java:514)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.migrateTable(AbstractSchemaMigrator.java:333)
	at org.hibernate.tool.schema.internal.GroupedSchemaMigratorImpl.performTablesMigration(GroupedSchemaMigratorImpl.java:84)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.performMigration(AbstractSchemaMigrator.java:232)
	at org.hibernate.tool.schema.internal.AbstractSchemaMigrator.doMigration(AbstractSchemaMigrator.java:117)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:286)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:145)
	at java.base/java.util.HashMap.forEach(HashMap.java:1421)
	at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:142)
	at org.hibernate.boot.internal.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:37)
	at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)
	at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:315)
	at org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:450)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1507)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:75)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:376)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:409)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:396)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1820)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1769)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1232)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:950)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:334)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347)
	at uz.pdp.projectmodul10.ProjectModul10Application.main(ProjectModul10Application.java:56)
Caused by: org.postgresql.util.PSQLException: ERROR: syntax error at or near "DEFAULT"
  Position: 91
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2713)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2401)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:368)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:498)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:415)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:335)
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:321)
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:297)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:292)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)
	... 38 common frames omitted
2025-01-22 22:47:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add column available_colors varchar(255) check (available_colors in ('WHITE','BROWN','BLACK','CUSTOM'))
2025-01-22 22:47:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add column base_model_id bigint
2025-01-22 22:47:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add column custom_color_code varchar(255)
2025-01-22 22:47:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add column is_base_model boolean
2025-01-22 22:47:30 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 22:47:31 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-22 22:47:32 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-22 22:47:33 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-22 22:47:33 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-22 22:47:33 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-22 22:47:33 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-22 22:47:33 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-22 22:47:33 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@776b18ac, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@b56bd6f, org.springframework.security.web.context.SecurityContextHolderFilter@1ca6df99, org.springframework.security.web.header.HeaderWriterFilter@a820ecc, org.springframework.web.filter.CorsFilter@64be75a6, org.springframework.security.web.authentication.logout.LogoutFilter@448b53d5, uz.pdp.config.filtr.MyFilter@34e9de8d, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@42fa4908, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7188e5a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@67b6ae86, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@ff75e38, org.springframework.security.web.access.ExceptionTranslationFilter@68f637a5, org.springframework.security.web.access.intercept.AuthorizationFilter@2efa352c]
2025-01-22 22:47:34 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-22 22:47:34 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 31.499 seconds (process running for 31.798)
2025-01-22 22:47:35 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-22 22:47:35 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 22:47:36 [RMI TCP Connection(1)-127.0.0.1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-01-22 22:47:36 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-01-22 22:47:36 [RMI TCP Connection(1)-127.0.0.1] INFO  o.s.web.servlet.DispatcherServlet - Completed initialization in 2 ms
2025-01-22 22:47:44 [http-nio-8080-exec-9] INFO  o.s.api.AbstractOpenApiResource - Init duration for springdoc-openapi is: 601 ms
2025-01-22 22:50:30 [SpringApplicationShutdownHook] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Closing JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 22:50:30 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-01-22 22:50:31 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-01-22 22:53:05 [main] INFO  u.p.p.ProjectModul10Application - Starting ProjectModul10Application using Java 17.0.14 with PID 206587 (/home/lantanium/Documents/G45-Project/target/classes started by lantanium in /home/lantanium/Documents/G45-Project)
2025-01-22 22:53:05 [main] DEBUG u.p.p.ProjectModul10Application - Running with Spring Boot v3.2.1, Spring v6.1.2
2025-01-22 22:53:05 [main] INFO  u.p.p.ProjectModul10Application - No active profile set, falling back to 1 default profile: "default"
2025-01-22 22:53:05 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 22:53:05 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-01-22 22:53:05 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 89 ms. Found 11 JPA repository interfaces.
2025-01-22 22:53:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Multiple Spring Data modules found, entering strict repository configuration mode
2025-01-22 22:53:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2025-01-22 22:53:06 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 5 ms. Found 0 Redis repository interfaces.
2025-01-22 22:53:06 [main] WARN  o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'webMvcConfig' of type [uz.pdp.config.WebMvcConfig$$SpringCGLIB$$0] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying). The currently created BeanPostProcessor [methodValidationPostProcessor] is declared through a non-static factory method on that class; consider declaring it as static instead.
2025-01-22 22:53:06 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-01-22 22:53:06 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-01-22 22:53:06 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.17]
2025-01-22 22:53:06 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-01-22 22:53:06 [main] INFO  o.s.b.w.s.c.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1758 ms
2025-01-22 22:53:07 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-01-22 22:53:07 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.4.1.Final
2025-01-22 22:53:07 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-01-22 22:53:07 [main] INFO  o.s.o.j.p.SpringPersistenceUnitInfo - No LoadTimeWeaver setup: ignoring JPA class transformer
2025-01-22 22:53:07 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-01-22 22:53:10 [main] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection org.postgresql.jdbc.PgConnection@3791160a
2025-01-22 22:53:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-01-22 22:53:10 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: PostgreSQLDialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-01-22 22:53:11 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-01-22 22:53:11 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       drop constraint if exists FKf8co3916tiiox4iohci7ybiyg
2025-01-22 22:53:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK7wf86ejdl44syummkme09y06f
2025-01-22 22:53:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       drop constraint if exists FK1fa36y2oqhao3wgg2rw1pi459
2025-01-22 22:53:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       drop constraint if exists FK810a8gq30miyp6j1eub97qm6k
2025-01-22 22:53:12 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       drop constraint if exists FKara19f2xv7ml3a24f50v6bsk2
2025-01-22 22:53:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       drop constraint if exists FKlgeojgfhu94pbgyev43gtwdyq
2025-01-22 22:53:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       drop constraint if exists FKt90ivcl5f3phabfuqw6k3t9ow
2025-01-22 22:53:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       drop constraint if exists FKbmmwc1jeq02ocr0c6mgv45yiy
2025-01-22 22:53:13 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       drop constraint if exists FKd2g3blkiuq2wj2trx3wnjk5me
2025-01-22 22:53:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKlskx5ehjqd7u0dmumo4bhuliu
2025-01-22 22:53:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       drop constraint if exists FKajibco0vlgy0ngsyg33k0wb0u
2025-01-22 22:53:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       drop constraint if exists FK33nbb6c7curx5h7rp8479q7ea
2025-01-22 22:53:14 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       drop constraint if exists FKgbgrx2rwc3wskrr30uptj4tmy
2025-01-22 22:53:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       drop constraint if exists FKou1xuy3rdeao75p2x1v4v3xs
2025-01-22 22:53:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       drop constraint if exists FKtncfqos5bn3jhhxs9m55tsgjk
2025-01-22 22:53:15 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FKf50k9uqc2hstd0yl9uujhoq74
2025-01-22 22:53:16 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       drop constraint if exists FK32ql8ubntj5uh44ph9659tiih
2025-01-22 22:53:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists address_social_links cascade
2025-01-22 22:53:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists addresses cascade
2025-01-22 22:53:16 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket cascade
2025-01-22 22:53:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists basket_item cascade
2025-01-22 22:53:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company cascade
2025-01-22 22:53:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists company_socials_list cascade
2025-01-22 22:53:17 [main] DEBUG org.hibernate.SQL - 
    drop table if exists custom_enum_values cascade
2025-01-22 22:53:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_available_colors cascade
2025-01-22 22:53:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_history cascade
2025-01-22 22:53:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists door_images cascade
2025-01-22 22:53:18 [main] DEBUG org.hibernate.SQL - 
    drop table if exists doors cascade
2025-01-22 22:53:19 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Warning Code: 0, SQLState: 00000
2025-01-22 22:53:19 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - drop cascades to constraint fkhnsu61r3d0osc8r3qosr54qcs on table door_available_sizes
2025-01-22 22:53:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists email_verifications cascade
2025-01-22 22:53:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_door_images cascade
2025-01-22 22:53:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists furniture_doors cascade
2025-01-22 22:53:19 [main] DEBUG org.hibernate.SQL - 
    drop table if exists locations cascade
2025-01-22 22:53:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists orders cascade
2025-01-22 22:53:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists ticket cascade
2025-01-22 22:53:20 [main] DEBUG org.hibernate.SQL - 
    drop table if exists users cascade
2025-01-22 22:53:20 [main] DEBUG org.hibernate.SQL - 
    create table address_social_links (
        address_id bigint not null,
        link varchar(255),
        social_type varchar(255) not null check (social_type in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM')),
        primary key (address_id, social_type)
    )
2025-01-22 22:53:21 [main] DEBUG org.hibernate.SQL - 
    create table addresses (
        is_default boolean not null,
        id bigserial not null,
        location_id bigint unique,
        user_id bigint,
        city varchar(255),
        email varchar(255),
        name varchar(255),
        phone_number varchar(255),
        street varchar(255),
        working_hours varchar(255),
        primary key (id)
    )
2025-01-22 22:53:21 [main] DEBUG org.hibernate.SQL - 
    create table basket (
        id bigserial not null,
        user_id bigint unique,
        primary key (id)
    )
2025-01-22 22:53:21 [main] DEBUG org.hibernate.SQL - 
    create table basket_item (
        price float(53) not null,
        quantity integer not null,
        basket_id bigint,
        id bigserial not null,
        item_id bigint,
        version integer DEFAULT 0 not null,
        image varchar(255),
        name varchar(255),
        type varchar(255) check (type in ('DOOR','ACCESSORY')),
        primary key (id)
    )
2025-01-22 22:53:22 [main] DEBUG org.hibernate.SQL - 
    create table company (
        work_time date,
        address_id bigint unique,
        id bigserial not null,
        email varchar(255),
        name varchar(255),
        phone varchar(255),
        primary key (id)
    )
2025-01-22 22:53:22 [main] DEBUG org.hibernate.SQL - 
    create table company_socials_list (
        company_id bigint not null,
        socials_list varchar(255) check (socials_list in ('FACEBOOK','TWITTER','INSTAGRAM','LINKEDIN','TELEGRAM'))
    )
2025-01-22 22:53:22 [main] DEBUG org.hibernate.SQL - 
    create table custom_enum_values (
        is_active boolean not null,
        created_at timestamp(6),
        created_by bigint,
        id bigserial not null,
        display_name varchar(255) not null,
        enum_type varchar(255) not null,
        name varchar(255) not null unique,
        primary key (id)
    )
2025-01-22 22:53:22 [main] DEBUG org.hibernate.SQL - 
    create table door_available_colors (
        door_id bigint not null,
        available_colors varchar(255) check (available_colors in ('WHITE','BROWN','BLACK','CUSTOM'))
    )
2025-01-22 22:53:23 [main] DEBUG org.hibernate.SQL - 
    create table door_history (
        accessed_at timestamp(6),
        door_id bigint not null,
        id bigserial not null,
        user_id bigint not null,
        primary key (id)
    )
2025-01-22 22:53:23 [main] DEBUG org.hibernate.SQL - 
    create table door_images (
        door_id bigint not null,
        images varchar(255)
    )
2025-01-22 22:53:23 [main] DEBUG org.hibernate.SQL - 
    create table doors (
        active boolean not null,
        custom_height float(53),
        custom_width float(53),
        final_price float(53),
        is_base_model boolean,
        is_custom_color boolean,
        price float(53),
        warranty_years integer,
        base_model_id bigint,
        id bigserial not null,
        seller_id bigint,
        color varchar(255) check (color in ('WHITE','BROWN','BLACK','CUSTOM')),
        custom_color_code varchar(255),
        description varchar(255),
        door_location varchar(255) check (door_location in ('WINDOW','ROOM','BATHROOM','KITCHEN','ENTRANCE','BEDROOM','LIVING_ROOM','BALCONY','GARAGE')),
        frame_type varchar(255) check (frame_type in ('STANDARD','TELESCOPIC','HIDDEN','REBATED','NON_REBATED')),
        hardware varchar(255) check (hardware in ('STANDARD_HINGES','PIVOT','SLIDING','POCKET','BARN_DOOR','BI_FOLD','CONCEALED_HINGES','SPRING_HINGES','DOUBLE_ACTION','AUTOMATIC')),
        manufacturer varchar(255),
        material varchar(255),
        name varchar(255),
        size varchar(255) check (size in ('SIZE_200x2000','SIZE_300x2000','SIZE_400x2000','SIZE_500x2000','SIZE_600x2000','SIZE_700x2000','SIZE_800x2000','SIZE_900x2000','SIZE_1000x2000','SIZE_1100x2000','SIZE_1200x2000','CUSTOM')),
        status varchar(255) not null check (status in ('AVAILABLE','PENDING','SOLD','INACTIVE','UNAVAILABLE')),
        primary key (id)
    )
2025-01-22 22:53:23 [main] DEBUG org.hibernate.SQL - 
    create table email_verifications (
        verified boolean not null,
        created_at timestamp(6),
        expiry_time timestamp(6) not null,
        id bigserial not null,
        updated_at timestamp(6),
        user_id bigint not null,
        type varchar(255) not null check (type in ('SELLER_REQUEST','PASSWORD_RESET','EMAIL_CONFIRMATION')),
        verification_code varchar(255) not null,
        primary key (id)
    )
2025-01-22 22:53:24 [main] DEBUG org.hibernate.SQL - 
    create table furniture_door_images (
        furniture_door_id bigint not null,
        image_url varchar(255)
    )
2025-01-22 22:53:24 [main] DEBUG org.hibernate.SQL - 
    create table furniture_doors (
        price float(53) not null,
        stock_quantity integer not null,
        id bigserial not null,
        description varchar(255),
        dimensions varchar(255),
        furniture_type varchar(255) not null check (furniture_type in ('LOCK','HANDLE','HINGES','AUTOMATIC_CLOSER','NO_FURNITURE')),
        material varchar(255) not null,
        name varchar(255) not null,
        primary key (id)
    )
2025-01-22 22:53:24 [main] DEBUG org.hibernate.SQL - 
    create table locations (
        latitude float(53),
        longitude float(53),
        id bigserial not null,
        marker_title varchar(255),
        primary key (id)
    )
2025-01-22 22:53:25 [main] DEBUG org.hibernate.SQL - 
    create table orders (
        door_id bigint not null,
        id bigserial not null,
        order_date timestamp(6) with time zone not null,
        preferred_delivery_time timestamp(6) with time zone,
        user_id bigint not null,
        comment varchar(1000),
        delivery_notes varchar(1000),
        installation_notes varchar(1000),
        contact_phone varchar(255) not null,
        customer_name varchar(255) not null,
        delivery_address varchar(255) not null,
        email varchar(255) not null,
        order_type varchar(255) not null check (order_type in ('FULL_SET','POLOTNO')),
        status varchar(255) not null check (status in ('PENDING','CONFIRMED','PROCESSING','SHIPPED','DELIVERED','CANCELLED')),
        primary key (id)
    )
2025-01-22 22:53:25 [main] DEBUG org.hibernate.SQL - 
    create table ticket (
        id bigserial not null,
        user_id bigint,
        primary key (id)
    )
2025-01-22 22:53:25 [main] DEBUG org.hibernate.SQL - 
    create table users (
        active boolean not null,
        seller_request_pending boolean not null,
        id bigserial not null,
        email varchar(255) unique,
        lastname varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255) not null,
        role varchar(255) not null check (role in ('USER','SELLER','ADMIN')),
        primary key (id)
    )
2025-01-22 22:53:25 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_material 
       on doors (material)
2025-01-22 22:53:26 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_manufacturer 
       on doors (manufacturer)
2025-01-22 22:53:26 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_price 
       on doors (price)
2025-01-22 22:53:26 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_name 
       on doors (name)
2025-01-22 22:53:26 [main] DEBUG org.hibernate.SQL - 
    create index idx_door_active_status 
       on doors (active, status)
2025-01-22 22:53:27 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_user 
       on orders (user_id)
2025-01-22 22:53:27 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_door 
       on orders (door_id)
2025-01-22 22:53:27 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_status_date 
       on orders (status, order_date)
2025-01-22 22:53:28 [main] DEBUG org.hibernate.SQL - 
    create index idx_order_type_date 
       on orders (order_type, order_date)
2025-01-22 22:53:28 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_name 
       on users (name)
2025-01-22 22:53:28 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_phone 
       on users (phone)
2025-01-22 22:53:28 [main] DEBUG org.hibernate.SQL - 
    create index idx_user_role_active 
       on users (role, active)
2025-01-22 22:53:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists address_social_links 
       add constraint FKf8co3916tiiox4iohci7ybiyg 
       foreign key (address_id) 
       references addresses
2025-01-22 22:53:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK7wf86ejdl44syummkme09y06f 
       foreign key (location_id) 
       references locations
2025-01-22 22:53:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists addresses 
       add constraint FK1fa36y2oqhao3wgg2rw1pi459 
       foreign key (user_id) 
       references users
2025-01-22 22:53:29 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket 
       add constraint FK810a8gq30miyp6j1eub97qm6k 
       foreign key (user_id) 
       references users
2025-01-22 22:53:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists basket_item 
       add constraint FKara19f2xv7ml3a24f50v6bsk2 
       foreign key (basket_id) 
       references basket
2025-01-22 22:53:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company 
       add constraint FKlgeojgfhu94pbgyev43gtwdyq 
       foreign key (address_id) 
       references addresses
2025-01-22 22:53:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists company_socials_list 
       add constraint FKt90ivcl5f3phabfuqw6k3t9ow 
       foreign key (company_id) 
       references company
2025-01-22 22:53:30 [main] DEBUG org.hibernate.SQL - 
    alter table if exists custom_enum_values 
       add constraint FKbmmwc1jeq02ocr0c6mgv45yiy 
       foreign key (created_by) 
       references users
2025-01-22 22:53:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_available_colors 
       add constraint FKd2g3blkiuq2wj2trx3wnjk5me 
       foreign key (door_id) 
       references doors
2025-01-22 22:53:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKlskx5ehjqd7u0dmumo4bhuliu 
       foreign key (door_id) 
       references doors
2025-01-22 22:53:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_history 
       add constraint FKajibco0vlgy0ngsyg33k0wb0u 
       foreign key (user_id) 
       references users
2025-01-22 22:53:31 [main] DEBUG org.hibernate.SQL - 
    alter table if exists door_images 
       add constraint FK33nbb6c7curx5h7rp8479q7ea 
       foreign key (door_id) 
       references doors
2025-01-22 22:53:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists doors 
       add constraint FKgbgrx2rwc3wskrr30uptj4tmy 
       foreign key (seller_id) 
       references users
2025-01-22 22:53:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists email_verifications 
       add constraint FKou1xuy3rdeao75p2x1v4v3xs 
       foreign key (user_id) 
       references users
2025-01-22 22:53:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists furniture_door_images 
       add constraint FKtncfqos5bn3jhhxs9m55tsgjk 
       foreign key (furniture_door_id) 
       references furniture_doors
2025-01-22 22:53:32 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FKf50k9uqc2hstd0yl9uujhoq74 
       foreign key (door_id) 
       references doors
2025-01-22 22:53:33 [main] DEBUG org.hibernate.SQL - 
    alter table if exists orders 
       add constraint FK32ql8ubntj5uh44ph9659tiih 
       foreign key (user_id) 
       references users
2025-01-22 22:53:33 [main] INFO  o.s.o.j.LocalContainerEntityManagerFactoryBean - Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-01-22 22:53:34 [main] INFO  o.s.d.j.r.query.QueryEnhancerFactory - Hibernate is in classpath; If applicable, HQL parser will be used.
2025-01-22 22:53:35 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-01-22 22:53:36 [main] INFO  o.s.g.e.DefaultSchemaResourceGraphQlSourceBuilder - Loaded 1 resource(s) in the GraphQL schema.
2025-01-22 22:53:36 [main] INFO  o.s.b.a.g.GraphQlAutoConfiguration - GraphQL schema inspection:
	Unmapped fields: {Query=[door, doors, user, address, addresses, searchAddresses, nearestAddress, doorHistory, order, userOrders, userAddresses], Mutation=[configureDoor, updateProfile, approveSeller, deactivateAccount, createOrder, updateOrderStatus, addAddress], Address=[country, zipCode], Subscription=[orderStatusChanged, newDoorAdded]}
	Unmapped registrations: {Query.getDoorById=DoorGraphQLController#getDoorById[1 args], Query.getAddressById=AddressGraphQLController#getAddressById[1 args], Query.getRecentHistory=DoorHistoryGraphQLController#getRecentHistory[1 args], Query.getAddressesByCity=AddressGraphQLController#getAddressesByCity[1 args], Query.getUserDoorHistory=DoorHistoryGraphQLController#getUserDoorHistory[2 args], Query.getDoorHistory=DoorHistoryGraphQLController#getDoorHistory[1 args], Query.getAllDoors=DoorGraphQLController#getAllDoors[0 args], Query.getAllAddresses=AddressGraphQLController#getAllAddresses[0 args], Query.getUserHistory=DoorHistoryGraphQLController#getUserHistory[1 args], Mutation.updateDoorStatus=DoorGraphQLController#updateDoorStatus[3 args], Mutation.validateAddress=AddressGraphQLController#validateAddress[1 args]}
	Skipped types: []
2025-01-22 22:53:36 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint HTTP POST /graphql
2025-01-22 22:53:36 [main] INFO  o.s.b.a.g.s.GraphQlWebMvcAutoConfiguration - GraphQL endpoint WebSocket /graphql-ws
2025-01-22 22:53:36 [main] INFO  o.s.b.a.e.web.EndpointLinksResolver - Exposing 26 endpoint(s) beneath base path '/actuator'
2025-01-22 22:53:36 [main] INFO  o.s.s.web.DefaultSecurityFilterChain - Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@5f043b, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@25a993b2, org.springframework.security.web.context.SecurityContextHolderFilter@ffa99e0, org.springframework.security.web.header.HeaderWriterFilter@76f3595, org.springframework.web.filter.CorsFilter@350b3c06, org.springframework.security.web.authentication.logout.LogoutFilter@1c4b12b7, uz.pdp.config.filtr.MyFilter@1f1ffc18, org.springframework.security.web.authentication.www.BasicAuthenticationFilter@35913efb, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@145549ff, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@6815d598, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@550eebcb, org.springframework.security.web.access.ExceptionTranslationFilter@8fc1750, org.springframework.security.web.access.intercept.AuthorizationFilter@f060454]
2025-01-22 22:53:37 [main] INFO  o.s.b.w.e.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path ''
2025-01-22 22:53:37 [main] INFO  u.p.p.ProjectModul10Application - Started ProjectModul10Application in 32.862 seconds (process running for 33.182)
2025-01-22 22:53:37 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.name=? 
        and u1_0.active=true
2025-01-22 22:53:38 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:38 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        doors d1_0
2025-01-22 22:53:39 [main] DEBUG org.hibernate.SQL - 
    select
        count(*) 
    from
        furniture_doors fd1_0
2025-01-22 22:53:39 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.active,
        u1_0.email,
        u1_0.lastname,
        u1_0.name,
        u1_0.password,
        u1_0.phone,
        u1_0.role,
        u1_0.seller_request_pending 
    from
        users u1_0 
    where
        u1_0.email=? 
        and u1_0.active=true
2025-01-22 22:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (active, email, lastname, name, password, phone, role, seller_request_pending) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:40 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:41 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:42 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:43 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:44 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-22 22:53:44 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-22 22:53:44 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-22 22:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:45 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:46 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:47 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:48 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:48 [main] DEBUG org.hibernate.SQL - 
    select
        d1_0.id,
        d1_0.active,
        d1_0.base_model_id,
        d1_0.color,
        d1_0.custom_color_code,
        d1_0.custom_height,
        d1_0.custom_width,
        d1_0.description,
        d1_0.door_location,
        d1_0.final_price,
        d1_0.frame_type,
        d1_0.hardware,
        d1_0.is_base_model,
        d1_0.is_custom_color,
        d1_0.manufacturer,
        d1_0.material,
        d1_0.name,
        d1_0.price,
        d1_0.seller_id,
        d1_0.size,
        d1_0.status,
        d1_0.warranty_years 
    from
        doors d1_0 
    where
        d1_0.id=?
2025-01-22 22:53:49 [main] DEBUG org.hibernate.SQL - 
    select
        ac1_0.door_id,
        ac1_0.available_colors 
    from
        door_available_colors ac1_0 
    where
        ac1_0.door_id=?
2025-01-22 22:53:49 [main] DEBUG org.hibernate.SQL - 
    select
        i1_0.door_id,
        i1_0.images 
    from
        door_images i1_0 
    where
        i1_0.door_id=?
2025-01-22 22:53:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:49 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_available_colors
        (door_id, available_colors) 
    values
        (?, ?)
2025-01-22 22:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:50 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:51 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        doors
        (active, base_model_id, color, custom_color_code, custom_height, custom_width, description, door_location, final_price, frame_type, hardware, is_base_model, is_custom_color, manufacturer, material, name, price, seller_id, size, status, warranty_years) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
2025-01-22 22:53:52 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        door_images
        (door_id, images) 
    values
        (?, ?)
